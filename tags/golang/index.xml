<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on taka👨🏻‍💻</title><link>https://takakd.github.io/tags/golang/</link><description>Recent content in golang on taka👨🏻‍💻</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Fri, 23 Oct 2020 05:24:54 +0900</lastBuildDate><atom:link href="https://takakd.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>SlackのEventAPIのリトライコールを防ぐ - golang</title><link>https://takakd.github.io/articles/20201023052454/</link><pubDate>Fri, 23 Oct 2020 05:24:54 +0900</pubDate><guid>https://takakd.github.io/articles/20201023052454/</guid><description>エラーレスポンスを返す時でもリトライさせたくない場合は、ヘッダにX-Slack-No-Retryを指定する。 func handler(w http.ResponseWriter, r *http.Request) { // Process something... // Set &amp;#34;X-Slack-No-Retry: 1&amp;#34; if prevent retry. w.Header().Set(&amp;#34;X-Slack-No-Retry&amp;#34;, &amp;#34;1&amp;#34;) w.Header().Set(&amp;#34;Content-Type&amp;#34;, &amp;#34;application/json&amp;#34;) w.WriteHeader(http.StatusBadRequest) w.Write([]byte(&amp;#34;&amp;#34;)) } Reference https://api.slack.com/events-api#the-events-api__field-guide__error-handling__graceful-retries__turning-retries-off</description></item><item><title>generate gomockでエラーが出た - golang</title><link>https://takakd.github.io/articles/20201021052243/</link><pubDate>Wed, 21 Oct 2020 05:22:43 +0900</pubDate><guid>https://takakd.github.io/articles/20201021052243/</guid><description>gomockでエラー。とりあえず古いファイルを消して再実行すると解消できた。 % mockgen -source ./internal/app/usecase/xxx/repository.go -destination ./internal/app/usecase/xxx/repository_mock.go -package xxx -: found packages xxx (repository.go) and mock_updateproteinevent (repository_mock.go) in /Users/xxx/go/src/proteinreminder/internal/app/usecase/xxx 2020/10/21 04:21:56 Loading input failed: loading package failed # Delete % rm -rf ./internal/app/usecase/xxx/repository_mock.go # Run again and completed. % mockgen -source ./internal/app/usecase/xxx/repository.go -destination</description></item><item><title>golang-migrateのヘルパスクリプト - golang</title><link>https://takakd.github.io/articles/20201017051917/</link><pubDate>Sat, 17 Oct 2020 05:19:17 +0900</pubDate><guid>https://takakd.github.io/articles/20201017051917/</guid><description>.sql向けgolang-migrateのヘルパスクリプトです。 機能 .envからデータソースを読み込み ディレクトリ内のSQLファイルでマイグレート SQLのみ対応</description></item><item><title>API Gateway + Lambda - golang</title><link>https://takakd.github.io/articles/20200705022238/</link><pubDate>Sun, 05 Jul 2020 02:22:39 +0900</pubDate><guid>https://takakd.github.io/articles/20200705022238/</guid><description>APIGateway + GoでLambdaのサンプルです。 仕様 エンドポイント: https://&amp;lt;API ID&amp;gt;.execute-api.ap-northeast-1.amazonaws.com/&amp;lt;stage&amp;gt;/&amp;lt;Resource&amp;gt; HTTPメソッド: GET パラメータ: { &amp;#34;text&amp;#34;: &amp;#34;string&amp;#34; } Lambdaハンドラ 引数をstructで定義。 package main import ( &amp;#34;context&amp;#34; &amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;</description></item><item><title>安全なtruncate string - golang</title><link>https://takakd.github.io/articles/20200628021817/</link><pubDate>Sun, 28 Jun 2020 02:18:17 +0900</pubDate><guid>https://takakd.github.io/articles/20200628021817/</guid><description>package main import ( &amp;#34;fmt&amp;#34; ) // Truncate string. func TruncateString(str string, length int) string { if length &amp;lt;= 0 { return &amp;#34;&amp;#34; } // This code cannot support Japanese // orgLen := len(str) // if orgLen &amp;lt;= length { // return str // } // return str[:length] // Support Japanese // Ref: Range loops https://blog.golang.org/strings truncated := &amp;#34;&amp;#34; count := 0 for _, char := range str { truncated += string(char) count++ if count &amp;gt;= length { break }</description></item><item><title>"omitempty"のメモ - golang</title><link>https://takakd.github.io/articles/20200625021433/</link><pubDate>Thu, 25 Jun 2020 02:14:34 +0900</pubDate><guid>https://takakd.github.io/articles/20200625021433/</guid><description>json.Marshal はomitemptyが値型stringに設定されていれば空文字を出力する。 フィールド自体不要な場合は、ポインタ型stringにするといい。 package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type ValueSlice struct</description></item><item><title>ParseFormした値をstructに設定 - golang</title><link>https://takakd.github.io/articles/20200623021217/</link><pubDate>Tue, 23 Jun 2020 02:12:17 +0900</pubDate><guid>https://takakd.github.io/articles/20200623021217/</guid><description>// Set FormValues to struct func SetFormValueToStruct(values url.Values, structPtr interface{}) error { // Get the pointer of struct ptr := reflect.ValueOf(structPtr) // Get the value of struct value := ptr.Elem() // Set value to struct field valueType := value.Type() for i := 0; i &amp;lt; value.NumField(); i++ { jsonTag := valueType.Field(i).Tag.Get(&amp;#34;json&amp;#34;) if value.Field(i).CanSet() == false { return errors.New(&amp;#34;cannot set value to field&amp;#34;) } value.Field(i).Set(reflect.ValueOf(values.Get(jsonTag))) } return nil } // Example func ExampleSetFormValueToStruct() { // Form values formValues := url.Values{} formValues.Set(&amp;#34;test1&amp;#34;,</description></item><item><title>URLクエリ文字列を生成 - golang</title><link>https://takakd.github.io/articles/20200620021106/</link><pubDate>Sat, 20 Jun 2020 02:11:07 +0900</pubDate><guid>https://takakd.github.io/articles/20200620021106/</guid><description>params := url.Values{ &amp;#34;keyword&amp;#34;: {&amp;#34;some&amp;#34;}, } reqUrl := &amp;#34;https://yourendpoint.example.com?&amp;#34; + params.Encode() Reference https://golang.org/pkg/net/url/#URL.Query</description></item><item><title>ユニコードキャラクタをエスケープシーケンスに変換 - golang</title><link>https://takakd.github.io/articles/20200612020628/</link><pubDate>Fri, 12 Jun 2020 02:06:28 +0900</pubDate><guid>https://takakd.github.io/articles/20200612020628/</guid><description>json.Unmarshalしたデータに含まれる文字列のユニコードキャラクタをエスケープシーケンスに変換します。 // func convertJsonElement(data interface{}) interface{} { switch v := data.(type) { case map[string]interface{}: for ik, iv := range v { v[ik] = convertJsonElement(iv) }</description></item><item><title>パッケージ名で悩む - golang</title><link>https://takakd.github.io/articles/20200607143024/</link><pubDate>Sun, 07 Jun 2020 14:30:24 +0900</pubDate><guid>https://takakd.github.io/articles/20200607143024/</guid><description>プロジェクト内で、HTTPのユーティリティ関数をまとめるモジュールの命名に悩んでいました。 結果はproject-layoutの構成で、internalの下にht</description></item><item><title>panicのテスト - golang</title><link>https://takakd.github.io/articles/20200528043646/</link><pubDate>Thu, 28 May 2020 04:36:46 +0900</pubDate><guid>https://takakd.github.io/articles/20200528043646/</guid><description>Goでパニックが発生するかどうかのテストです。 // Testing if testFunc calls panic. // e.g. // IsTestCallPanic(func(){ // &amp;lt;place test target here.&amp;gt; // }) func IsTestCallPanic(testFunc func()) (ok bool) { defer func() { if err := recover(); err == nil { ok = false } }() ok = true testFunc() return } // Test for test. func TestIsTestCallPanic(t *testing.T) { isCalled := IsTestCallPanic(func() {</description></item><item><title>Interfaceポインタの型エラー - golang</title><link>https://takakd.github.io/articles/20200413235004/</link><pubDate>Mon, 13 Apr 2020 23:50:06 +0900</pubDate><guid>https://takakd.github.io/articles/20200413235004/</guid><description>Iocコンテナを作ろうとして次のようなコードを書くとエラーが出ました。 原因はinterfaceのポインタの型エラー。 // interface type IFace interface { hello() string } // concrete type type Concrete struct { } func NewConcrete() *Concrete { return</description></item><item><title>error table [name] has no column [column]</title><link>https://takakd.github.io/articles/20200131021820/</link><pubDate>Fri, 31 Jan 2020 02:18:21 +0900</pubDate><guid>https://takakd.github.io/articles/20200131021820/</guid><description>GoでsqliteにデータをInsertしようとしてエラー。 $ error table Balance has no column named price Insertしているコードを見ても問題はない。 カラムを確認すると…… 2個目のカラム</description></item></channel></rss>