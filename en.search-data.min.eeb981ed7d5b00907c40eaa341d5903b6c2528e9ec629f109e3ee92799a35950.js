'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/journals/20201225012630/','title':"はじめての自作キーボードの費用のふりかえり",'section':"Journals",'content':"この記事は キーボード #2 Advent Calendar 2020の25日目の記事です。昨日はyouon_epさんの「 今年届いたカスタムキーボード」でした。普段目にすることのないキーボードの数々を見ることができますよ。\nはじめに #  9月頃に参加したWeb開発者向けミートアップで、登壇者が自作キーボードについて話されているのを聞き、興味が湧いたので私も作ってみました。作るといっても、今は先人たちが試行錯誤した成果が自作キーボードキットやパーツとして販売されておりまして、それを組み立てたというものになります。\n組み立てるのは楽しいものなのですが、気の向くままに色々購入した結果、興味が湧いたにしてはとんでもない出費になってしまいました。そこでこの記事では、同じように組み立ててみようと思い立った方に向けて、私の費用のふりかえりを紹介させていただこうと思います。\n費用 #  meishi2、ErgoDash、Let\u0026rsquo;s Splitの3個を組み立てました。\n総額はなんと ￥80,729\n内訳は次のとおり。\nmeishi2 #   meishi2 keyboard ビルドガイド\n   品物 価格     meishi2 キット 3,157   工作スペース利用料 500    ErgoDash #   ErgoDashについて\n   品物 価格     ErgoDash キット 14,300   工作スペース利用料 2,000   スタビライザ * 2 440   スペーサ * 16 770   キーキャップ 2U * 2 660   キースイッチ Gateron silent clear 3,806   キーキャップセット 6,150   キーキャップ 1U XDA * 31 3,260   キーキャップ 2U XDA * 4 1,059   ホットスワップ用ソケット 6,377   BLE Micro Pro * 2, LPME-IO * 2, 電池基板 * 2 12,800   セメダイン ハイスーパー5 P-6g 289   マスキングテープ 289    Let\u0026rsquo;s Split #   An Overly Verbose Guide to Building a Let\u0026rsquo;s Split Keyboard\n   品物 価格     Let\u0026rsquo;s Split キット 7,300   キースイッチ Gateron slient Brown 3,625   キーキャップセット 3,956   ホットスワップ用ソケット 8,023   スプリングピン * 4 968   工作スペース 1,000    ふりかえり　#  良かった点\n はんだコテ買わなかった 大きな失敗なく組み上がった  悪かった点\n キットやスイッチは落ち着いて選ぶ 使わないものを買いすぎた レンタル工作スペースを利用するときはできるだけ準備していく 部品をつかえるかどうかはちゃんと確認する  それぞれ内容は次のとおりです。\nはんだコテ買わなかった #  はんだコテを買おうかどうか迷ったのですが結局買いませんでした。自宅にモノを増やしたくないことが理由なのですが、結果的に節約に繋がりました。\n はんだコテセット：￥15,000 工作スペース利用料合計：￥3,500   遊舎工房さんの工作スペースを利用させていただき、そこのサービスレベルが非常に高く助けられました。\nはんだコテをお持ちでない方は、近くに工作スペースサービスが無いか確認することをオススメします。\n大きな失敗なく組み上がった #  電子工作は得意でもなく不得意でもないのですが、それぞれ失敗なく組み上がりました。失敗すると追加で部品を購入する必要が出てくる場合もあり出費が増えますが、そういうことがなかったので良かったです。\nキットやスイッチは慎重に選べばよかった #  もうこれにつきます。　とりあえず1台作ってみようと思い立ち、利用シーンを検討せず勢いでErgoDashを購入しました。そしてErgoDashを組み立てる前にまずは練習だ！と meishi2 を購入。しかしいずれも今は使っておらず、そもそも必要なかったように思います。\n meishi2 まずは自作キーボード組立の練習として購入したけど、作った経験が活きることはなかった。 ErgoDash レイアウトに少し違和感あるけどそのうち慣れるだろうと思ったが、やっぱり馴染めない。直感大事。 Gateron silent clearキースイッチ 何これ、すごい軽いらしい、面白そう、使っていれば慣れるだろうと試し打ちしないまま購入。結果、タイプミスだらけ馴染めない。  とりあえず1台っていうのもワクワクしますが、少し落ち着いて吟味しておけば不要な出費を防げたように思います。自作キーボードのキットは在庫数がたくさんあるわけでもなく、本当に求めてらっしゃる方に届かないのも悲しいですよね。\nしっかり使い込んでいきたい方は、はやる気持ちを抑えてゆっくりとキットやスイッチ選びを楽しまれることをオススメします。\n使わないものを買いすぎた #  例えば、\n BLE Micro Pro, LPME-IO, 電池基板 ErgoDashをBluetooth無線化するのに使える部品。在庫が復活したのでとりあえず2個購入したけど、使ってない。 キーキャップ 2U XDA * 4、スタビライザ * 2 ErgoDashの親指箇所が2Uキーなので購入したけど、使わなかった。 キーキャップ 1U XDA * 31 キーの色変えてみたらカッコいいだろうと思って色々購入したけど、使わなかった。  初心者は最初のうちは、都度必要なものだけを購入するようにしたほうがよさそうです。\nレンタル工作スペースを利用するときはできるだけ準備をしていく #  工作スペースでErgoDashを組み立てる時、ホットスワップ用のソケットを差し込む作業をしておりました。マスキングテープを貼る時間含めると1時間ぐらいかかったように思います。 この作業って自宅でもできるんですよね。\nできる作業は事前にしておき、工作スペースではそこでしかできない作業をしたほうが有効活用できます。\nそのキットで部品を使えるかどうかはちゃんと確認する #  Let\u0026rsquo;s Splitを組み立てた時の話です。\nPro Microを基板にはんだ付けすると、UBSコネクタがもげたときの修理が大変なので、スプリングピンを使おうと考えました。事前にWebで調べていて特に情報がなかったのですが、まあ大丈夫だろうと購入した結果、失敗でした。スプリングピン4個購入した後にやるぞ！と差し込んでスカスカとなったときに気づきました。まずは1個買って試してた後に残りを購入すればよかったんですよね。\nキットによって使える部品と使えない部品があるので、しっかり確認して進めると無駄な出費を抑えられます。\n当たり前ですけど……\n理想 #  最初にわかれば苦労はなく、当然そう上手くはいきませんが、今利用しているLet\u0026rsquo;s Splitに必要なものだけ購入していたとすると……\n総額：￥80,729\n↓\n総額：￥18,881\nでした。\n内訳は次のとおり。特にErgoDashの費用にびっくり。\nmeishi2 #  不要な出費: ￥3,657\nErgoDash #  不要な出費: ￥52,200\nLet\u0026rsquo;s Split #  不要な出費: ￥4,968\n   品物 価格     ホットスワップ用ソケット 約4,000（余分に注文した分）   スプリングピン4 968    まとめ #  落ち着いて買い物すべきでしね。総額出した時に「まじか！」と声出ました。\nのんびり色々と手を出していると、ちりつもで費用かかりますということを共有でき、皆様の出費を抑えることができれば嬉しいです。\nこの記事は、￥80,729費やしたLet\u0026rsquo;s Splitで書かれました。\n"});index.add({'id':1,'href':'/pages/resume/','title':"Resume - 工藤高浩（クドウタカヒロ）",'section':"Pages",'content':"Resume - 工藤高浩（クドウタカヒロ） #  概要 #  バックエンドエンジニア - ミドルレベル\n案件提案時の技術検証やモック実装。設計・実装、リリース後の保守・運用を担当しています。\n ソフトウェア開発 4年 Web関連開発 6年 AWS, Heroku, Salesforce使用経験 4年  業務経験 #  2013年 - 現在　株式会社TAM　東京 #  Web開発エンジニア アプリケーションの設計と実装、リリース後の保守運用\n ファイナンシャルプランニングサービス会社の会員ポータル 広告宣伝アセット管理システム 航空輸送会社のキャンペーンサイト 物流業務管理システム  2006年 - 2012年　株式会社創研　大阪 #  ソフトウェアエンジニア アプリケーションの設計と実装、リリース後の保守運用\n フットサルコート予約アプリケーション 配送輸送用ラベル生成Adobeイラストレータープラグイン 美容室予約アプリケーション 業務用プリント基板製造装置の操作用Windowsアプリケーション 監視カメラ管理ユニット操作用Windowsアプリケーション  スキル #   上級レベル：PHP, JavaScript, AWS, Heroku, Salesforce, SQL, CentOS. 中級レベル：Golang, Python, HTML5, CSS3, C++, C#, Java. 初級レベル：Ruby.  資格 #   AWS ソリューションアーキテクト - プロフェッショナル AWS DevOps エンジニア – プロフェッショナル AWS デベロッパー - アソシエイト AWS SysOps アドミニストレーター - アソシエイト AWS ソリューションアーキテクト - アソシエイト Salesforce 認定 Platform デベロッパー IPA システムアーキテクト TOEIC 780  学歴 #   大阪教育大学 教育学部 教養学科 自然研究専攻 物質科学コース（2006年卒業）  SNS #   GitHub: https://github.com/takakd LinkedIn: https://www.linkedin.com/in/takakd/ Dev.to: https://dev.to/takakd  ミートアップ #    re:Invent初参加印象に残ったシーン： JAWS-UG Osaka / AAJUG関西合同 re:invent 2019 振り返り \u0026amp; LT忘年会  GitHub Actions + Cloudflare API： GitHub Actions Meetup Osaka #1  受託開発の現場におけるdocker利用事例： Docker Meetup Kansai #4  Service Worker + Dropbox API： PWA Night OSAKA キックオフ ～PWAのミライや活用方法をみんなで考えよう～  Vue.js + WordPress： v-kansai Vue.js/Nuxt.js meetup #7  WordPress with Vue.js： WordCamp Ogijima 2018  "});index.add({'id':2,'href':'/articles/20201129173130/','title':"AWS SDK for Goを使ったユニットテスト",'section':"Articles",'content':" AWS SDK for Goの各AWSサービスのユニットテストのコードです。\n単純にラップするするstructを作ってテストしています。\n例えば、DynamoDBの場合は次の通り。\n実装 #  package repository import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/aws/aws-sdk-go/aws\u0026#34; \u0026#34;github.com/aws/aws-sdk-go/aws/session\u0026#34; \u0026#34;github.com/aws/aws-sdk-go/service/dynamodb\u0026#34; \u0026#34;github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute\u0026#34; // ... ) // SDK wrapper interface, which can be able to unit test. type DynamoDbWrapper interface { // Define the same as SDK. \tQuery(input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) // Define, if it needs more. \t// ... } // Default implementation. // Use this if the argument of \u0026#34;NewDynamoDbRepository\u0026#34; is not passed. type DynamoDbWrapperAdapter struct { svc *dynamodb.DynamoDB } // Dispatch simply. func (d *DynamoDbWrapperAdapter) Query(input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) { return d.svc.Query(input) } // Set wrp to null. In case unit test, set mock interface. func NewDynamoDbRepository(wrp DynamoDbWrapper) updatetimerevent.Repository { if wrp == nil { wrp = \u0026amp;DynamoDbWrapperAdapter{ svc: dynamodb.New(session.New()), } } return \u0026amp;DynamoDbRepository{ wrp: wrp, } } // Find something. func (r *DynamoDbRepository) FindSome(ctx context.Context, userId string) (some *SomeStruct, err error) { input := \u0026amp;dynamodb.QueryInput{ ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{ \u0026#34;:userid\u0026#34;: { S: aws.String(userId), }, }, KeyConditionExpression: aws.String(\u0026#34;UserId = :userid\u0026#34;), TableName: aws.String(\u0026#34;DYNAMODB_TABLE\u0026#34;), } // Call mock method, if r.wrp is set mock. \tresult, err := r.wrp.Query(input) if err != nil { return } // ... } テストコード #  t.Run(\u0026#34;ok:Query\u0026#34;, func(t *testing.T) { caseUserId := \u0026#34;test user\u0026#34; caseInput := \u0026amp;dynamodb.QueryInput{ ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{ \u0026#34;:userid\u0026#34;: { S: aws.String(caseUserId), }, }, KeyConditionExpression: aws.String(\u0026#34;UserId = :userid\u0026#34;), TableName: aws.String(\u0026#34;DYNAMODB_TABLE\u0026#34;), } caseItem := \u0026amp;dynamodb.QueryOutput{ Items: []map[string]*dynamodb.AttributeValue{}, } ctrl := gomock.NewController(t) defer ctrl.Finish() s := NewMockDynamoDbWrapper(ctrl) s.EXPECT().Query(gomock.Eq(caseInput)).Return(caseItem, nil) repo := NewDynamoDbRepository(s) got, err := repo.FindSome(context.TODO(), caseUserId) assert.NoError(t, err) // assert... }) Ref.\n  AWS SDK for Go  aws/aws-sdk-go  "});index.add({'id':3,'href':'/articles/20201116004243/','title':"The REST API doesn't contain any methods (Service: AmazonApiGateway...",'section':"Articles",'content':"AWS CloudFormationでProxy統合したAPIをデプロイしようとして次のようなエラーがでました。\nCREATE_FAILED AWS::ApiGateway::Deployment SomeDeployment The REST API doesn\u0026#39;t contain any methods (Service:BadRequestException; Request ID:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx; Proxy: null) 原因は、Deploymentリソース作成時にAWS::ApiGateway::Methodリソースがまだ作られていないためdoesn't contain\nDependsOnをAWS::ApiGateway::Deploymentに追記することで解決できました。\n記述のクセをつけておいたほうがよさそうですね。\nRef.\n https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html https://nickolaskraus.org/articles/creating-an-amazon-api-gateway-with-a-lambda-integration-using-cloudformation/  "});index.add({'id':4,'href':'/articles/20201114200158/','title':"ブロックチェーンアプリケーション開発の教科書",'section':"Articles",'content':"ブロックチェーンアプリケーション開発でおすすめの書籍を教えていただいたので読みました。\n ブロックチェーンアプリケーション開発の教科書（リフロー版）\n教科書というタイトル通り、実装方法だけではなくブロックチェーンの概要から実装に関する注意点まで網羅されています。Solidityによるコントラクトの実装と合わせて、ブロックチェーンアプリケーション開発に関して外観を眺めたい人にオススメです。\nこの書籍は出版が2018年ということもあり、書籍に掲載されているコードのいくつかはそのまま実行できないものがありました。これから読まれる方に向けて覚えている範囲でトラブルシュートの内容を残しておきます。\n実行環境 #   macOS 10.15.5 Node v15.0.1 npm 7.0.3 go 1.14.4 Truffle v5.1.52 (core: 5.1.52) Solidity v0.5.16 (solc-js) Web3.js v1.2.9  トラブルシュート #   Kindleリフロー版に基づいて記載しています。\n対象はコントラクト実装に関するChapter6から8です。\nSolidity構文に関する7.2から7.5は対象外です。\n変更済みのコードは こちらにまとめています。\n6.1.4.3: Gethの初期化処理 #  次のエラーが出ました。\nFatal: Failed to write genesis block: unsupported fork ordering: eip150Block not enabled, but eip155Block enabled at 0 6.1.4.1のgenesis.jsonのフォーマットが変わったので、次のように変更します。\n{ \u0026#34;config\u0026#34;: { \u0026#34;chainId\u0026#34;: 33, \u0026#34;homesteadBlock\u0026#34;: 0, \u0026#34;eip150Block\u0026#34;: 0, \u0026#34;eip155Block\u0026#34;: 0, \u0026#34;eip158Block\u0026#34;: 0, \u0026#34;byzantiumBlock\u0026#34;: 0, \u0026#34;constantinopleBlock\u0026#34;: 0, \u0026#34;petersburgBlock\u0026#34;: 0, \u0026#34;istanbulBlock\u0026#34;: 0 }, \u0026#34;alloc\u0026#34;: {}, \u0026#34;coinbase\u0026#34;: \u0026#34;0x0000000000000000000000000000000000000000\u0026#34;, \u0026#34;difficulty\u0026#34;: \u0026#34;0x20000\u0026#34;, \u0026#34;extraData\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;gasLimit\u0026#34;: \u0026#34;0x2fefd8\u0026#34;, \u0026#34;nonce\u0026#34;: \u0026#34;0x0000000000000042\u0026#34;, \u0026#34;mixhash\u0026#34;: \u0026#34;0x0000000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;parentHash\u0026#34;: \u0026#34;0x0000000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;timestamp\u0026#34;: \u0026#34;0x00\u0026#34; } Ref:\n https://github.com/ethereum/go-ethereum/blob/feeccdf4ec1084b38dac112ff4f86809efd7c0e5/params/config.go#L71  6.1.5.8: ロックの解除 #  personal.unlockAccountでエラーがでました。\nGoError: Error: account unlock with HTTP access is forbidden at web3.js:6347:37(47) at native at \u0026lt;eval\u0026gt;:1:24(6) 6.1.4.6のgeth起動コマンドに--allow-insecure-unlockを追加すると実行可能になります。\ngeth --networkid \u0026#34;33\u0026#34; --nodiscover --datadir $DATA_DIR --rpc --rpcaddr \u0026#34;localhost\u0026#34; --rpcport \u0026#34;8545\u0026#34; --rpccorsdomain \u0026#34;*\u0026#34; --rpcapi \u0026#34;eth,net,web3,personal\u0026#34; \\  --allow-insecure-unlock \\  --targetgaslimit \u0026#34;20000000\u0026#34; console 2\u0026gt;\u0026gt; ${DATA_DIR}/error.log unlockはデフォルトで機能OFFに変更されたようです。\nRef:\n https://github.com/ethereum/go-ethereum/pull/17037 https://github.com/ethereum/go-ethereum/issues/19507#issuecomment-487453981  7.1.2.2: SimpleStorage.sol #  Solidityのバージョンアップで記述方法が変わったので、次のように変更します。\n// remix IDEサンプルsolidityコードのバージョンに合わせる pragma solidity \u0026gt;=0.4.22 \u0026lt;0.7.0; contract SimpleStorage { uint storedData; // publicが必要  function set(uint x) public { storedData = x; } // publicが必要、constant廃止、viewに変える  function get() public view returns (uint) { return storedData; } } 7.1.2.9: SimpleStorageOwner.sol #  コンストラクタの書式が変わったので、次のように変更します。\npragma solidity \u0026gt;=0.4.22 \u0026lt;0.7.0; contract SimpleStorageOwner { uint storedData; address owner; // コンストラクタの記述が、construct() publicに変更  constructor() public { owner = msg.sender; } // ... } Ref:\n https://solidity.readthedocs.io/en/v0.5.3/050-breaking-changes.html?highlight=constructor  8.1.6.2: MetaCoin.sol #  Solidityのバージョンアップで記述方法が変わったのですが、次のコマンドで取得するコードを実行すればOKでした。\n$ truffle unbox metacoin 8.1.6.8: MetaCoinを変数に保存する #  truffle(develop)\u0026gt; m = await MetaCoin.at(\u0026#34;\u0026lt;address\u0026gt;\u0026#34;) atはPromiseを返すようになったのでawait or コールバックで受け取ります。\nRef:\n https://www.trufflesuite.com/docs/truffle/getting-started/interacting-with-your-contracts#use-a-contract-at-a-specific-address  また、8.1.6.7の出力形式が変わったので、コントラクトのアドレスはcontract address:の値を使用します。\nReplacing \u0026#39;MetaCoin\u0026#39; -------------------- \u0026gt; transaction hash: 0xdf84b6dc0debb81e22284bbc8b214c27a9c5b18b76e5ea9baef60c33bc3916b1 \u0026gt; Blocks: 0 Seconds: 0 \u0026gt; contract address: 0x1dA8f51aad5Eb8B2997AA9dc0FFD838900A2CA1C \u0026gt; block number: 9 8.1.6.9: getBalanceの呼び出し #  web3.eth.getAccountsはPromiseを返すようになったのでawait or コールバックで受け取ります。\n8.1.6.11 - 8.1.6.17でweb3.eth.getAccountsを使用しているところも同様にaccounts[\u0026lt;index\u0026gt;]を指定します。\ntruffle(develop)\u0026gt; accounts = await web3.eth.getAccounts() truffle(develop)\u0026gt; m.getBalance(accounts[0]) Ref:\n https://www.trufflesuite.com/docs/truffle/getting-started/interacting-with-your-contracts#making-a-transaction  8.2.2.1: OpenZeppelinのインストール #  zeppelin-solidityはdeprecatedになりました。代わりにopenzeppelin-contractsを使用します。\n$ npm init -f $ npm install @openzeppelin/contracts Ref:\n https://www.npmjs.com/package/zeppelin-solidity  8.2.3.1: トークンのコントラクト #  openzeppelin-contractsを使用するため記述が変わります。次のように変更します。\npragma solidity \u0026gt;=0.5.16 \u0026lt;0.8.0; import \u0026#34;@openzeppelin/contracts/token/ERC20/ERC20.sol\u0026#34;; // https://docs.openzeppelin.com/contracts/2.x/erc20-supply contract DappsToken is ERC20 { string public name = \u0026#34;Dappstoken\u0026#34;; string public symbol = \u0026#34;DTKN\u0026#34;; uint public decimals = 18; constructor(uint256 initialSupply) public { _mint(msg.sender, initialSupply); // 8.3.2.15を実行するときは10e18を追加  //_mint(msg.sender, initialSupply * (10 ** 18));  } } 8.2.4.3: マイグレーションの実行 #  8.1.6.8同様にawaitを使用します。\ntruffle(develop)\u0026gt; dappsToken = await DappsToken.at(DappsToken.address) 8.3.1.3: truffle.js #  networks.development.network_idはgethのrunコマンドで指定している--networkidと同じ値を指定します。\n8.3.2.7: MateMask Ether Faucetでのトランザクション発行 #  エラーが出てEtherを取得できませんでした。取得は別サイトでも可能なのでそれを利用します。いくつかあるようですが以下のサイトで取得できました。\n Ethereum Faucet - Ropsten\nRef:\n https://github.com/MetaMask/metamask-extension/issues/5439#issuecomment-716547644  8.3.2.11: truffle.jsにRopstenを設定 #  truffleのバージョンアップで記述方法が変わったので、npmモジュールを追加して、コードを次のように変更します。\n@truffle/hdwallet-providerモジュールの追加\ntruffle-config.jsで使用するモジュールを追加します。\n$ npm install @truffle/hdwallet-provider .secret\n認証情報を.secretに定義します。MetaMaskで作成したアカウントのニーモニックをスペース区切りで入力します。\n\u0026lt;nemonic1\u0026gt; \u0026lt;nemonic2\u0026gt; \u0026lt;nemonic3\u0026gt; ... truffle-config.js\nファイル名がtruffle.jsからtruffle-config.jsに変わりました。\nHDWalletProviderに渡すURLにaccessTokenではなくPROJECT SECRETを渡します。PROJECT SECRETは Infuraで作成したプロジェクトで取得できます。\nconst HDWalletProvider = require(\u0026#39;@truffle/hdwallet-provider\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); const mnemonic = fs.readFileSync(\u0026#34;.secret\u0026#34;).toString().trim(); module.exports = { networks: { development: { host: \u0026#34;localhost\u0026#34;, // Localhost (default: none)  port: 8545, // Standard Ethereum port (default: none)  network_id: \u0026#34;33\u0026#34;, // Any network (default: none)  }, ropsten: { provider: () =\u0026gt; new HDWalletProvider(mnemonic, `https://ropsten.infura.io/v3/\u0026lt;Infura PROJECT SECRET\u0026gt;`), network_id: 3, // Ropsten\u0026#39;s id  gas: 5500000, // Ropsten has a lower block limit than mainnet  confirmations: 2, // # of confs to wait between deployments. (default: 0)  timeoutBlocks: 200, // # of blocks before a deployment times out (minimum/default: 50)  skipDryRun: true // Skip dry run before migrations? (default: false for public nets )  }, }, ... }; 8.3.2.14, 8.3.2.15 #  migrateでinitialSupplyのオーバーフローエラーが出るので、Contract側で1e18するように変更します。\n2_deploy_dapps_token.js\nconst DappsToken = artifacts.require(\u0026#34;./Dappstoken.sol\u0026#34;); module.exports = function(deployer){ const initialSupply = 1000; // ここでは1000を渡す  deployer.deploy(DappsToken, initialSupply, { gas: 2000000 }); } DappsToken.sol\npragma solidity \u0026gt;=0.5.16 \u0026lt;0.8.0; import \u0026#34;@openzeppelin/contracts/token/ERC20/ERC20.sol\u0026#34;; // https://docs.openzeppelin.com/contracts/2.x/erc20-supply contract DappsToken is ERC20 { string public name = \u0026#34;Dappstoken\u0026#34;; string public symbol = \u0026#34;DTKN\u0026#34;; uint public decimals = 18; constructor(uint256 initialSupply) public { // ここでdecimalsに合わせ、1e18する  _mint(msg.sender, initialSupply * (10 ** 18)); } } 8.3.2.20: 変数にトークンを設定 #  overflowで失敗するのでweb3.utils.toBNで変換した値を渡します。\ntruffle(ropsten)\u0026gt; d.transfer(“\u0026lt;receiver address\u0026gt;”, web3.utils.toBN(1e18)) 8.3.2.21: 残高の確認 #  残高がwordに値を分割して表示されます。次のように表示すると一つの値で表示できます。\ntruffle(ropsten)\u0026gt; d.totalSupply().then(result =\u0026gt; {console.log(result.toString())}) まとめ #  Solidityや関連ライブラリのバージョンアップに伴い、コードのフォーマットが大きく変化していることで、ブロックチェーン関連技術の変化の速さを実感しますね。\n調べていると、もうここまで開発が進んでいるのかという印象も。\n"});index.add({'id':5,'href':'/articles/20201102010035/','title':"API Gateway統合レスポンスのヘッダーのマッピングで固定値を設定",'section':"Articles",'content':"CloudFormation(.yaml)で、API Gatewayの統合レスポンスのヘッダーのマッピングで固定値を指定したい場合は、次のように書くとよい。\nSomeMethod: Type: AWS::ApiGateway::Method Properties: HttpMethod: POST ... Integration: Type: AWS IntegrationHttpMethod: POST ... IntegrationResponses: - StatusCode: 200 SelectionPattern: \u0026#34;status:200\u0026#34; ResponseParameters: # OK method.response.header.X-STATIC-HEADER: \u0026#34;\u0026#39;1\u0026#39;\u0026#34; # NG method.response.header.X-STATIC-HEADER: 1 # NG method.response.header.X-STATIC-HEADER: \u0026#34;1\u0026#34; Reference #  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apitgateway-method-integration-integrationresponse.html#cfn-apigateway-method-integration-integrationresponse-responseparameters\n"});index.add({'id':6,'href':'/articles/20201023052454/','title':"SlackのEventAPIのリトライコールを防ぐ - golang",'section':"Articles",'content':"エラーレスポンスを返す時でもリトライさせたくない場合は、ヘッダにX-Slack-No-Retryを指定する。\nfunc handler(w http.ResponseWriter, r *http.Request) { // Process something...  // Set \u0026#34;X-Slack-No-Retry: 1\u0026#34; if prevent retry.  w.Header().Set(\u0026#34;X-Slack-No-Retry\u0026#34;, \u0026#34;1\u0026#34;) w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) w.WriteHeader(http.StatusBadRequest) w.Write([]byte(\u0026#34;\u0026#34;)) } Reference #  https://api.slack.com/events-api#the-events-api__field-guide__error-handling__graceful-retries__turning-retries-off\n"});index.add({'id':7,'href':'/articles/20201021052243/','title':"generate gomockでエラーが出た - golang",'section':"Articles",'content':"gomockでエラー。とりあえず古いファイルを消して再実行すると解消できた。\n% mockgen -source　./internal/app/usecase/xxx/repository.go -destination ./internal/app/usecase/xxx/repository_mock.go -package xxx -: found packages xxx (repository.go) and mock_updateproteinevent (repository_mock.go) in /Users/xxx/go/src/proteinreminder/internal/app/usecase/xxx 2020/10/21 04:21:56 Loading input failed: loading package failed # Delete % rm -rf ./internal/app/usecase/xxx/repository_mock.go # Run again and completed. % mockgen -source　./internal/app/usecase/xxx/repository.go -destination ./internal/app/usecase/xxx/repository_mock.go -package xxx "});index.add({'id':8,'href':'/articles/20201017051917/','title':"golang-migrateのヘルパスクリプト - golang",'section':"Articles",'content':".sql向け golang-migrateのヘルパスクリプトです。\n機能 #   .envからデータソースを読み込み ディレクトリ内のSQLファイルでマイグレート SQLのみ対応  helper.sh\n#!/usr/bin/env bash  # golang-migrate helper script # https://github.com/golang-migrate/migrate usage() { echo \u0026#34;Usage: migrate.sh COMMAND COMMAND: Input golang-migrate command and options. \u0026#39;create\u0026#39; is limited to SQL. e.g. migrate.sh create NAME migrate.sh up migrate.sh down 2 \u0026#34; } if [[ \u0026#34;$1\u0026#34; = \u0026#34;help\u0026#34; ]]; then usage exit 0 fi SCRIPT_DIR=$(cd $(dirname \u0026#34;$0\u0026#34;); pwd) ENV_FILE=${SCRIPT_DIR}/../configs/.env if [[ -e \u0026#34;$ENV_FILE\u0026#34; ]]; then source \u0026#34;$ENV_FILE\u0026#34; fi # Limit create to SQL if [[ \u0026#34;$1\u0026#34; = \u0026#34;create\u0026#34; ]]; then # Exclude options param=$(echo \u0026#34;$@\u0026#34; | sed -e \u0026#39;s/create //\u0026#39;) # Remove schema from env value dir=$(echo \u0026#34;$MIGRATION_DIR\u0026#34; | sed -e \u0026#39;s/file:\\/\\///\u0026#39;) migrate -source \u0026#34;$MIGRATION_DIR\u0026#34; -database \u0026#34;$DATABASE_URL\u0026#34; create -dir $dir -ext sql $param else migrate -source \u0026#34;$MIGRATION_DIR\u0026#34; -database \u0026#34;$DATABASE_URL\u0026#34; $@ fi .env\nMIGRATION_DIR=/Users/user/... DATABASE_URL=mysql:... プロジェクトに応じたヘルパスクリプトをよく作るのですが、他の現場ではどのくらい用意しているんだろう。\n"});index.add({'id':9,'href':'/articles/20200806023547/','title':"AWS5資格の勉強ログ",'section':"Articles",'content':"勉強を始めた時に勉強法を色々調べたのですが、勉強ログ的なものは少ないように思ったので残しておきます。どなたかの参考になれば幸いです。\n背景 #  勉強を始めた時のスペックは次の通り。\n AWS使用歴4年ぐらい。 使ったサービスは、EC2, Route53, EBS, IAM, VPC, CloudFront, S3程度。  履歴 #   2017/12　Passed - Cloud プラクティショナー 2018/1　Failed - ソリューションアーキテクト アソシエイト 2019/9　Passed - ソリューションアーキテクト アソシエイト 2019/10　Passed - デベロッパー アソシエイト 2019/11　Passed - SysOpsアドミニストレーター アソシエイト 2020/5　Passed - DevOpsエンジニア プロフェッショナル 2020/5　Failed - ソリューションアーキテクト プロフェッショナル 2020/6　Passed - ソリューションアーキテクト プロフェッショナル  ログ #  1. Cloud プラクティショナー #  Passed: スコア 710\nこの時点ではEC2, EBS, S3, Cloudfront, Route53を少し使った程度で、全サービスの基本となるVPCやIAMはだいたい50%程度の理解でした。\nまずはこの ビデオを見ました。70%程度は知っていた内容。\n続いて この本を1回読書。RedshiftやEMRなどの知らなかったサービスについて概要だけ掴むようにして、各サービス細かいところまでは突っ込んで見てはいませんでした。\n2. ソリューションアーキテクト アソシエイト #  Failed: スコア 650\n普段使わないサービスを中心に 本を再読しました。\n合わせて、本に出てきたサービスについて AWSサービス別資料の各資料を読みました。\nノートは取らずただ読むだけでした。\n本に出てきたサービスは次の通り：\nVPC, CloudFront, Route53, EC2, ELB, CloudWatch, CloudTrail, EBS,EFS, RDS, Redshift, KMS, CloudHSM, ACM, SQS, SWF, Step Function, CodeCommit, CodeBuild, Elastic Beanstalk, OpsWorks\n3. ソリューションアーキテクト アソシエイト #  Passed: スコア 755\n前回の試験から1年ぐらい経っていたのですが、AWSサービスの利用の幅に大きな変化はありませんでした。VPCやIAMの理解は進んでいたように思いますが、細かい設定内容までは理解できていなかったように思います。\n同じ勉強法だとまずい気がしたので、次のように変えました。\n 知らないこと出てきたらメモをとる。 e.g. Lambdaは使用メモリでCPUが決まる。とか。 メモするけど見返さない。 あまり理解できていないところは3回ぐらいメモ。それ以外は最初の1回だけ。  4. デベロッパー アソシエイト #  Passed: スコア 910\n whizlabs.comという模擬試験サービスを使い始めました。試験を解くだけの\u0026quot;Practice Test\u0026quot;を利用。\u0026ldquo;Online courses\u0026quot;という講義コンテンツもあるようですがそれは使いませんでした。\nひたすら問題を説いて解説を理解するというのを繰り返していました。解説の意味がわからない場合は AWSサービス別資料で確認。資料が提供されていないサービスの問題もあったので、その場合はググって確認。\n解いたのは\u0026quot;Free Test\u0026rdquo;、\u0026ldquo;Practice Test 1, 2, 3\u0026quot;を1回だけ。合計210問。初回スコアは65〜70%程度。\n5. SysOpsアドミニストレーター アソシエイト #  Passed: スコア 856\n引き続き whizlabs.comで勉強。\n解いたのは\u0026quot;Free Test\u0026rdquo;、\u0026ldquo;Practice Test 1, 2, 3\u0026rdquo;。合計210問。解いた回数は次の通り。\n Free Test: 1 time Practice Test 1: 5 times Practice Test 2: 2 times Practice Test 3: 1 time  初回スコアは50〜86%程度。管理系のサービスはあまり使ったことがなかったので、結果、解く回数が多かったです。\n6. DevOpsエンジニア プロフェッショナル #  Passed: スコア 750 😅\n解いたのは\u0026quot;Free Test\u0026quot;、\u0026ldquo;Practice Test 1, 2, 3\u0026rdquo;。合計255問。解いた回数は次の通り。\n Free Test: 2 time Practice Test 1: 3 times Practice Test 2: 2 times Practice Test 3: 1 time  初回スコアは40%程度。プロレベルになると複数サービスを関連させた問題で問題文も長くなり、慣れるまで時間がかかりました。\nあと、紙のメモだと書くのも見返すのも時間がかかるので、 Ankiというメモアプリを使い始めました。いわゆる表裏の暗記カード形式のアプリで、入力データは次のような感じ。\n例1: AWS サービス\n 表： DynamoDB 裏： いわゆるNoSQL。プロビジョンとオンデマンドモードがある。プロビジョンはRead/Writeキャパシティを個別に指定する必要がある。オンデマンドは不要。  例2: 問題\n 表： アプリケーションをサーバレス構成にして可用性を確保するにはどのような設計にする？ 裏： サーバレス構成はAPI Gateway, Lambda, DynamoDBを使用する。サーバレスの条件がない場合は、SQSやEC2オートスケールを検討。コスト考慮が必要なら、SQSやDAXで削減できるか検討。  移動中に\u0026quot;Anki\u0026quot;を見返してました。\n7. ソリューションアーキテクト プロフェッショナル #  Failed: スコア 712\n解く問題数を下げても結果でるかなと実験も兼ねて、解いたのは\u0026quot;Diagnostic Test\u0026quot;、\u0026ldquo;Practice Test 1\u0026rdquo;。合計160問。解いた回数は次の通り。\n Diagnostic Test: 3 times Practice Test1: 3 times  初回スコアは70%程度。アーキテクト試験ということで問題に出てくるサービスも多く、今まで見たことないサービスもありました。\n8. ソリューションアーキテクト プロフェッショナル #  Passed: スコア 779\nサービスの理解不足が目立ったので各サービスをおさらいしました。ここにきて初めてしっかりと AWSサービス別資料を読んでいたような気がします。\nあと、Ankiの1問1答だとデータ量が多くなってきたので、Macのメモアプリでサービスごとに要約しました。 AWSサービス別資料の自分がわからないバージョンみたいなもの。メモは合計82個（82サービス）多いもので200行、少ないものだと10行ぐらいでした。\n例：VPC\nコンポーネントはIGW, NAT, Subnetなど。\nVPCはネットワークスペース、サブネットはVPCに定義、ルートテーブルはサブネットにアタッチする。\nルートテーブルとサブネットは1対1。\nサブネットの最大数はVPCあたり200。\n\u0026hellip;\n whizlabs.comで解いたのは\u0026quot;Free Test\u0026quot;, \u0026ldquo;Diagnostic Test\u0026rdquo; and \u0026ldquo;Practice Test 1, 2, 3, 4, 5\u0026rdquo;, and \u0026ldquo;Final Test\u0026quot;で、合計535問。解いた回数は次の通り。\n Free Test: 2 times Diagnostic Test: 5 times Practice Test 1: 4 times Practice Test 2: 4 times Practice Test 3: 4 times Practice Test 4: 4 times Practice Test 5: 4 times Final Test: 1 time  時間かけた割にはあまりスコアが伸びませんでした。\n補足 #  whizlabs.com #  \u0026ldquo;Practice Test 1\u0026rdquo;, \u0026ldquo;Practice Test 2\u0026quot;と複数個の模擬試験問題があるのですが、各テストごとに問われるサービスが異なるようでした。\nそこそこが分量あるので、\u0026ldquo;Practice Test 1\u0026quot;を80問解くなら、\u0026ldquo;Practice Test 1\u0026rdquo;、\u0026ldquo;Practice Test 2\u0026quot;をそれぞれ40問解いた方が良さそうです。\n勉強時間 #   平日：1〜2時間 休日：5時間  仕事が忙しかった日は0。期間はアソシエイト2週間。プロフェッショナルで3週間ぐらい。\n解いた問題数\n 平日： 20〜40問 休日： 50〜80問  知っているサービスが多いときは進みが良かったです。\nAWSサービスの要約作業 #  Macメモアプリで要約していた作業です。大体1日15サービス。完了まで5日程度。\n所感 #  問題を解く #  資格勉強系でよく言われる過去問を解けという方針は、AWS資格試験でも当てはまるかと思います。多分 サービス資料集を覚えているだけでは解けなかったはず。どこでもいいんですが模擬試験を提供しているサービスを利用することをおすすめします。Udemyにもあるようです。\n実際に操作 #  実際に操作してみると理解が進むのでおすすめです。面倒くさいので中盤までは実際に設定を試していなかったのですが、振り返ると10回資料を読むよりも1回操作するほうが理解が早い印象でした。とはいっても、全サービスの設定を試している時間はないかと思うので、イメージが掴めないサービスを中心に操作してみるのがいいかもしれません。\n"});index.add({'id':10,'href':'/articles/20200705022238/','title':"API Gateway + Lambda - golang",'section':"Articles",'content':"APIGateway + GoでLambdaのサンプルです。\n仕様 #   エンドポイント: https://\u0026lt;API ID\u0026gt;.execute-api.ap-northeast-1.amazonaws.com/\u0026lt;stage\u0026gt;/\u0026lt;Resource\u0026gt; HTTPメソッド: GET パラメータ:  { \u0026#34;text\u0026#34;: \u0026#34;string\u0026#34; } Lambdaハンドラ #  引数をstructで定義。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;github.com/aws/aws-lambda-go/lambda\u0026#34; \u0026#34;github.com/pkg/errors\u0026#34; ) // Ref: https://docs.aws.amazon.com/lambda/latest/dg/golang-handler.html  // Receive arguments as struct. type Event struct { Text string `json:\u0026#34;text\u0026#34;` } func (e *Event) validate() bool { valid := true if e.Text == \u0026#34;\u0026#34; { valid = false } return valid } // Response type Response struct { Message string `json:\u0026#34;message\u0026#34;` } // Lambda handler func HandleRequest(ctx context.Context, event Event) (Response, error) { resp := Response{} if !event.validate() { return resp, errors.Errorf(\u0026#34;need text.\u0026#34;) } // Something to do you want here. \tresp.Message = \u0026#34;ok\u0026#34; return resp, nil } // Main func main() { lambda.Start(HandleRequest) } 統合リクエスト - マッピングテンプレート #  structに設定する値を追加。\nここではtextを設定しています。\n#set($allParams = $input.params()) { \u0026#34;text\u0026#34;: \u0026#34;$input.params(\u0026#39;text\u0026#39;)\u0026#34;, \u0026#34;body-json\u0026#34; : $input.json(\u0026#39;$\u0026#39;), ... } レスポンス #  返ってくるレスポンス。\n{ \u0026#34;message\u0026#34;: \u0026#34;ok\u0026#34; } "});index.add({'id':11,'href':'/articles/20200705022043/','title':"makeコマンドに引数を渡す",'section':"Articles",'content':"渡せるんですね🥺\n# Makefile DEFAULT=fuga test: @echo $(DEFAULT) # shell $ make # -\u0026gt; fuga $ make DEFAULT=hoge # -\u0026gt; hoge Reference #  https://stackoverflow.com/questions/2826029/passing-additional-variables-from-command-line-to-make\n"});index.add({'id':12,'href':'/articles/20200628021817/','title':"安全なtruncate string - golang",'section':"Articles",'content':"package main import ( \u0026#34;fmt\u0026#34; ) // Truncate string. func TruncateString(str string, length int) string { if length \u0026lt;= 0 { return \u0026#34;\u0026#34; } // This code cannot support Japanese  // orgLen := len(str)  // if orgLen \u0026lt;= length {  // return str  // }  // return str[:length]  // Support Japanese  // Ref: Range loops https://blog.golang.org/strings  truncated := \u0026#34;\u0026#34; count := 0 for _, char := range str { truncated += string(char) count++ if count \u0026gt;= length { break } } return truncated } // Main func main() { dataList := [][]interface{} { {\u0026#34;drink\u0026#34;, 3, \u0026#34;dri\u0026#34;}, {\u0026#34;drink\u0026#34;, 6, \u0026#34;drink\u0026#34;}, {\u0026#34;drink\u0026#34;, 0, \u0026#34;\u0026#34;}, {\u0026#34;drink\u0026#34;, -1, \u0026#34;\u0026#34;}, {\u0026#34;drink\u0026#34;, 100, \u0026#34;drink\u0026#34;}, {\u0026#34;pub\u0026#34;, 100, \u0026#34;pub\u0026#34;}, {\u0026#34;こんにちは\u0026#34;, 3, \u0026#34;こんに\u0026#34;}, } for _, dl := range dataList { r := TruncateString(dl[0].(string), dl[1].(int)) if r != dl[2].(string) { fmt.Printf(\u0026#34;ERROR: got=%s, want=%s\u0026#34;, r, dl[2].(string)) } } } https://play.golang.org/p/iakC8xxTlFI\nReference:\nhttps://play.golang.org/p/EzvhWMljku\n次のコードはエラーが出る。\npackage main import ( \u0026#34;fmt\u0026#34; ) func main() { s := \u0026#34;drink\u0026#34; r := s[:20] // error \tfmt.Println(r) } https://play.golang.org/p/7IfclYXADoW\n"});index.add({'id':13,'href':'/articles/20200625021433/','title':"\"omitempty\"のメモ - golang",'section':"Articles",'content':"json.Marshal はomitemptyが値型stringに設定されていれば空文字を出力する。\nフィールド自体不要な場合は、ポインタ型stringにするといい。\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; ) type ValueSlice struct { Values []V `json:\u0026#34;b,omitempty\u0026#34;` } type PtrSlice struct { Values []*V `json:\u0026#34;b,omitempty\u0026#34;` } type ValueStruct struct { Value V `json:\u0026#34;value,omitempty\u0026#34;` } type PtrStruct struct { Value *V `json:\u0026#34;value,omitempty\u0026#34;` } type V struct { Value string `json:\u0026#34;value\u0026#34;` } func main() { v1 := \u0026amp;ValueSlice{} v2 := \u0026amp;PtrSlice{} v3 := \u0026amp;ValueStruct{} v4 := \u0026amp;PtrStruct{} bv1, _ := json.Marshal(v1) bv2, _ := json.Marshal(v2) bv3, _ := json.Marshal(v3) bv4, _ := json.Marshal(v4) fmt.Printf(\u0026#34;bv1: %v\\n\u0026#34;, string(bv1)) fmt.Printf(\u0026#34;bv2: %v\\n\u0026#34;, string(bv2)) fmt.Printf(\u0026#34;bv3: %v\\n\u0026#34;, string(bv3)) fmt.Printf(\u0026#34;bv4: %v\\n\u0026#34;, string(bv4)) } 出力結果\nbv1: {} bv2: {} bv3: {\u0026#34;value\u0026#34;:{\u0026#34;value\u0026#34;:\u0026#34;\u0026#34;}} bv4: {} https://play.golang.org/p/7XKphsEayCN\n"});index.add({'id':14,'href':'/articles/20200623021217/','title':"ParseFormした値をstructに設定 - golang",'section':"Articles",'content':"// Set FormValues to struct func SetFormValueToStruct(values url.Values, structPtr interface{}) error { // Get the pointer of struct \tptr := reflect.ValueOf(structPtr) // Get the value of struct \tvalue := ptr.Elem() // Set value to struct field \tvalueType := value.Type() for i := 0; i \u0026lt; value.NumField(); i++ { jsonTag := valueType.Field(i).Tag.Get(\u0026#34;json\u0026#34;) if value.Field(i).CanSet() == false { return errors.New(\u0026#34;cannot set value to field\u0026#34;) } value.Field(i).Set(reflect.ValueOf(values.Get(jsonTag))) } return nil } // Example func ExampleSetFormValueToStruct() { // Form values \tformValues := url.Values{} formValues.Set(\u0026#34;test1\u0026#34;, \u0026#34;test1_value\u0026#34;) formValues.Set(\u0026#34;test2\u0026#34;, \u0026#34;test2_value\u0026#34;) // Struct that be wanted to set form values. \tstructPtr := \u0026amp;TestSetFormValueToStructStruct{} // Set \tstructWithValuesPtr := apphttputil.SetFormValueToStruct(formValues, structPtr) fmt.Printf(\u0026#34;%v\u0026#34;, structWithValuesPtr) } "});index.add({'id':15,'href':'/articles/20200620021106/','title':"URLクエリ文字列を生成 - golang",'section':"Articles",'content':"params := url.Values{ \u0026#34;keyword\u0026#34;: {\u0026#34;some\u0026#34;}, } reqUrl := \u0026#34;https://yourendpoint.example.com?\u0026#34; + params.Encode() Reference #  https://golang.org/pkg/net/url/#URL.Query\n"});index.add({'id':16,'href':'/articles/20200612020628/','title':"ユニコードキャラクタをエスケープシーケンスに変換 - golang",'section':"Articles",'content':"json.Unmarshalしたデータに含まれる文字列のユニコードキャラクタをエスケープシーケンスに変換します。\n// func convertJsonElement(data interface{}) interface{} { switch v := data.(type) { case map[string]interface{}: for ik, iv := range v { v[ik] = convertJsonElement(iv) } data = v case []interface{}: for ik, iv := range v { v[ik] = convertJsonElement(iv) } data = v case string: v = fmt.Sprintf(\u0026#34;%+q\u0026#34;, v) if len(v) \u0026gt; 0 { // Remove unnecessary double-quote \tdata = v[1 : len(v)-1] } default: } return data } // func main() { jsonStr := []byte(`{\u0026#34;test\u0026#34;:\u0026#34;こんにちは\u0026#34;}`) var data interface{} json.Unmarshal(jsonStr, \u0026amp;data) convertedData := convertJsonElement(data) } "});index.add({'id':17,'href':'/articles/20200607143024/','title':"パッケージ名で悩む - golang",'section':"Articles",'content':"プロジェクト内で、HTTPのユーティリティ関数をまとめるモジュールの命名に悩んでいました。\n結果は project-layoutの構成で、internalの下にhttputilを配置して解決。\n悩んでいた時は回答がでず、 こちらで聞いてみると、\n internalを作って、その下は好きにするといい httpextとextをつける  というような意見をいただきました。\n個人的にはinternalを使うほうが、プロジェクト内ということがわかりやすいと考え、そちらで実装。\n最初に考えていた名前は、mypackage/utils\nしかし、\u0026ldquo;Avoid meaningless package names.\u0026rdquo; (\u0026ldquo;Bad package names\u0026rdquo; section). という記載があるので違う気がする。\n次は、mypackage/http or mypackage/httputil\nこれは、\u0026ldquo;Avoid unnecessary package name collisions.\u0026rdquo; (\u0026ldquo;Bad package names\u0026rdquo; section). にひっかかるので違う気がする。\n最後に、mypackage/apphttputilsにしてましたが、どうにも冗長。質問を投げてみて、いただいたinternalの方法に変更。\n今思うと、 ドキュメントの命名に関する記述は外部に公開するパッケージで、今回悩んでいた命名は内部にとどまるパッケージ名、文脈が違いましたね。\n参考 #  https://blog.golang.org/package-names\n"});index.add({'id':18,'href':'/articles/20200606142418/','title':"npmモジュールのバージョンアップ - node",'section':"Articles",'content':"npm-checkを使うと対話式でアップデートできるのでわかりやすい。\n# Install checking module globally. $ npm install -g npm-check # Run. # -u means \u0026#34;update\u0026#34; $ npm-check -u # Select all basically. ? Choose which packages to update. (Press \u0026lt;space\u0026gt; to select) Missing. You probably want these. ❯◯ normalize.css missing 8.0.1 https://necolas.github.io/normalize.css ◯ babel-core devDep missing 6.26.3 https://babeljs.io/ ◯ browser-sync devDep missing 2.26.7 https://browsersync.io/ ◯ gulp devDep missing 4.0.2 https://gulpjs.com ◯ gulp-file-include devDep missing 2.2.2 https://github.com/haoxins/gulp-file-include#readme ◯ gulp-plumber devDep missing 1.2.1 https://github.com/floatdrop/gulp-plumber ◯ gulp-replace devDep missing 1.0.0 https://github.com/lazd/gulp-replace#readme ◯ gulp-sass devDep missing 4.1.0 https://github.com/dlmanning/gulp-sass#readme ◯ gulp-sourcemaps devDep missing 2.6.5 http://github.com/gulp-sourcemaps/gulp-sourcemaps ◯ node-sass-package-importer devDep missing 5.3.2 https://github.com/maoberlehner/node-sass-magic-importer/tree/master/packages/node-sass-p ackage-importer Major Update Potentially breaking API changes. Use caution. ◯ autoprefixer devDep missing 6.7.7 ❯ 9.8.0 https://github.com/postcss/autoprefixer#readme ◯ eslint devDep missing 3.19.0 ❯ 7.1.0 https://eslint.org ◯ eslint-config-prettier devDep missing 2.10.0 ❯ 6.11.0 https://github.com/prettier/eslint-config-prettier#readme ◯ gifsicle devDep missing 4.0.1 ❯ 5.1.0 https://github.com/imagemin/gifsicle-bin#readme ◯ gulp-babel devDep missing 7.0.1 ❯ 8.0.0 https://github.com/babel/gulp-babel#readme 知らぬ間にGitHubで立てていたリポジトリにnpmの脆弱性通知が来ていて、アカウントが乗っ取られたのかと思いました🤣\n参考 #   https://www.npmjs.com/package/npm-check  "});index.add({'id':19,'href':'/articles/20200528043646/','title':"panicのテスト - golang",'section':"Articles",'content':"Goでパニックが発生するかどうかのテストです。\n// Testing if testFunc calls panic. // e.g. // IsTestCallPanic(func(){ // \u0026lt;place test target here.\u0026gt; // }) func IsTestCallPanic(testFunc func()) (ok bool) { defer func() { if err := recover(); err == nil { ok = false } }() ok = true testFunc() return } // Test for test. func TestIsTestCallPanic(t *testing.T) { isCalled := IsTestCallPanic(func() { var i interface{} if i == nil { panic(\u0026#34;Hi, panic.\u0026#34;) } }) if !isCalled { t.Errorf(\u0026#34;failed.\u0026#34;) } } "});index.add({'id':20,'href':'/articles/20200415000215/','title':"Javadocの@see",'section':"Articles",'content':"こんなコメントを書いておりました。\nclass Hoge { /** * return greeting message string. * * @see https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html * @return greeting message string */ public String hello() { return \u0026#34;Hi\u0026#34;; } } @seeの使い方を間違ってます。\n正しくは次のようにhtmlタグが必要。\n/** * @see \u0026lt;a href=\u0026#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#CHDDIEDI\u0026#34;\u0026gt;javadoc\u0026lt;/a\u0026gt; */ @seeというアノテーションの使い勝手がいいので、wikiやらメモでも「確認すること」の意味で、@see http://〜なんて書いてました。 そしていつの間にかコードにも……\n参考 #  Form 2.の箇所: https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#CHDDIEDI\n"});index.add({'id':21,'href':'/articles/20200413235004/','title':"Interfaceポインタの型エラー - golang",'section':"Articles",'content':"Iocコンテナを作ろうとして次のようなコードを書くとエラーが出ました。\n原因はinterfaceのポインタの型エラー。\n// interface type IFace interface { hello() string } // concrete type type Concrete struct { } func NewConcrete() *Concrete { return \u0026amp;Concrete{} } // - implementation func (c *Concrete) hello() string { return \u0026#34;Hi\u0026#34; } // ioc type Ioc struct { } func NewIoc() *Ioc { return \u0026amp;Ioc{} } // NG: this method raises error // これは次のようなエラーがでる // cannot use NewConcrete() (type *Concrete) as type *IFace in return argument: // *IFace is pointer to interface, not interface func (i *Ioc) IFace() *IFace { return NewConcrete() } // こちらはOK func (i *Ioc) IFace() IFace { return NewConcrete() } func main() { i := NewIoc() ic := i.IFace() // ... } いくつ書き換えるとOK。\nしかし綺麗ではない。\n// value receiverにする func (c Concrete) hello() string { return \u0026#34;Hi\u0026#34; } ... // 型を明示的に指定していれるとOK func (i *Ioc) IFace() *IFace { var vif IFace var pif *IFace vif = *NewConcrete() pif = \u0026amp;vif return pif } structと同様に、ポインタを返したほうがコピーされる時のコストが低くなるかと思いきや、そもそもinterfaceはポインタ2個分なのでそれほどコストがかからない。 https://groups.google.com/forum/#!topic/golang-nuts/N9f70MZUulk\nちゃんとA Tour Of Goにも書いてますね……\nhttps://tour.golang.org/methods/11\n参考 #  https://groups.google.com/forum/#!topic/golang-nuts/N9f70MZUulk\nhttps://play.golang.org/p/5YquxHKRWL\n"});index.add({'id':22,'href':'/articles/20200307195400/','title':"Reconstruction of a Tree",'section':"Articles",'content':" Reconstruction of a Tree\nPreorderだけだと構造が決まらないので、Inorderと合わせて木構造を決定する。\nInorderの値の中のPreorder値の左右が、木の左右に対応する。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; ) func scanInput() (n int, pre []int, in []int) { fmt.Scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) pre = make([]int, n) in = make([]int, n) for i := 0; i \u0026lt; n; i++ { fmt.Scanf(\u0026#34;%d\u0026#34;, \u0026amp;pre[i]) } for i := 0; i \u0026lt; n; i++ { fmt.Scanf(\u0026#34;%d\u0026#34;, \u0026amp;in[i]) } return } func printSlice(slice []int) { fmt.Println(strings.Trim(strings.Join(strings.Fields(fmt.Sprint(slice)), \u0026#34; \u0026#34;), \u0026#34;[]\u0026#34;)) } func main() { n, pre, in := scanInput() post := make([]int, 0, n) parent := 0 walk(0, len(pre)-1, \u0026amp;parent, pre, in, \u0026amp;post) printSlice(post) } func walk(left, right int, parent *int, pre, in []int, post *[]int) { if left \u0026gt; right { return } dlm := pre[*parent] *parent++ var idx int for i, v := range in { if v == dlm { idx = i break } } walk(left, idx-1, parent, pre, in, post) walk(idx+1, right, parent, pre, in, post) *post = append(*post, dlm) } 配列の結果をポインタで引き回しているけど、引数で返したほうがよいのかな。\n参考 #  https://stackoverflow.com/questions/8307478/how-to-find-out-element-position-in-slice\n"});index.add({'id':23,'href':'/articles/20200306012400/','title':"Insertion Sort",'section':"Articles",'content':"もう一回おさらいということで プログラミングコンテスト攻略のためのアルゴリズムとデータ構造を購入しました。\n AIZU ONLINE JUDGEの Insertion Sortです。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; ) func scanInput() (n int, slice []int) { fmt.Scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) slice = make([]int, n) for i := 0; i \u0026lt; n; i++ { fmt.Scanf(\u0026#34;%d\u0026#34;, \u0026amp;slice[i]) } return } func printSlice(slice []int) { fmt.Println(strings.Trim(strings.Join(strings.Fields(fmt.Sprint(slice)), \u0026#34; \u0026#34;), \u0026#34;[]\u0026#34;)) } func main() { _, slice := scanInput() printSlice(slice) solve(slice) } func solve(nums []int) { l := len(nums) for i := 1; i \u0026lt; l; i++ { v := nums[i] j := i - 1 for j \u0026gt;= 0 \u0026amp;\u0026amp; nums[j] \u0026gt; v { nums[j+1] = nums[j] j-- } nums[j+1] = v printSlice(nums) } } ロジックよりも、入力を受け取る実装で戸惑いました。\nプログラミングパズルは言語の筋トレにもなっていいですね。\n参考 #  https://stackoverflow.com/questions/37532255/one-liner-to-transform-int-into-string\n"});index.add({'id':24,'href':'/articles/20200218121730/','title':"vimで複数行の文字列を1行のCSVにする",'section':"Articles",'content':"vimで複数行の文字列を1行のCSVにする方法です。\nエディタで簡単なSQLのIN句を作成するときによく使います。\n元のデータ\n1134 1373 3985 4588 Ctrl + Vで先頭に'を入れる。\n'1134 '1373 '3985 '4588 Ctrl + Vの後、$,Aして、',を入れる。\n'1134', '1373', '3985', '4588', 全行をjで選択してJで1行へ。\n'1134', '1373', '3985', '4588', 末尾の',を削除して、前後に()を入れて完成。\n('1134', '1373', '3985', '4588') スクリプトやコマンドを組み合わせてワンラインで書けそうな気もしますが、ややこしくなりそうなので、いつもこのようなコマンドを実行して整形しています。\n"});index.add({'id':25,'href':'/articles/20200131021820/','title':"error table [name] has no column [column]",'section':"Articles",'content':"GoでsqliteにデータをInsertしようとしてエラー。\n$ error table Balance has no column named price Insertしているコードを見ても問題はない。\nカラムを確認すると……\n2個目のカラムがおかしい。\n$ sqlite3 ./some_db_file_name.sql $ PRAGMA table_info(Balance); 0|time|DATETIME|1||1 1|rate|FLOAT|0||0 2|half|FLOAT price FLOAT|0||0 3|total|FLOAT|0||0 CREATE TABLEを確認するとtypoでした。\nc := fmt.Sprintf(` CREATE TABLE IF NOT EXISTS %s ( time DATETIME PRIMARY KEY NOT NULL, rate FLOAT, half FLOAT price FLOAT, total FLOAT)`, Balance) DbConnection.Exec(c) "});index.add({'id':26,'href':'/articles/20200119091945/','title':"シェルでzip圧縮",'section':"Articles",'content':"shellでzip圧縮するコマンドです。\n環境\n Mac 10.14.6 GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin18)  zip #  # -------------------------------------- # filename.txtをsth.zipに圧縮 # -Xで.DS_Storeなどの特殊ファイルを無視して圧縮 $ zip -X ./sth.zip ./filename.txt # -------------------------------------- # ディレクトリをzipに圧縮 # これだと空になってしまう $ zip ./sth.zip ./some_directory # -rを指定するか $ zip -r ./sth.zip ./some_directory # ファイルを与える $ zip ./sth.zip ./some_directory/* # -------------------------------------- # zipの中身を解凍せずに確認 $ zip -Z ./sth.zip 参考 #  http://totech.hateblo.jp/entry/2015/03/04/093757\n"});index.add({'id':27,'href':'/articles/20191227203724/','title':"階乗の桁数を出力するシェルコマンド",'section':"Articles",'content':"2のX乗の桁数を出力するコマンドです。\n# 1. arithmetic expressionsで計算 # 2. wcで結果の桁数をカウント $ echo -n $((2 ** 32)) | wc -c "});index.add({'id':28,'href':'/articles/20191225204407/','title':"添付ファイルがあるオブジェクト名を取得",'section':"Articles",'content':"Salesforceのオブジェクトの内、添付ファイルがついているオブジェクト名を取得するコードです。\n開発者コンソールの[Open Execute Anonymous Window]から実行できます。\n// 添付ファイルがついているレコードID取得 List\u0026lt;Attachment\u0026gt; atts = [SELECT ParentId From Attachment]; Set\u0026lt;Id\u0026gt; idSet = new Set\u0026lt;Id\u0026gt;(); for (Attachment att : atts) { idSet.add(att.ParentId); } // レコードIDからオブジェクト名取得 Set\u0026lt;String\u0026gt; objSet = new Set\u0026lt;String\u0026gt;(); for (Id rid : idSet) { Schema.SObjectType name = rid.getSObjectType(); objSet.add(String.valueOf(name)); } // ログで確認 System.debug(objSet); メリークリスマス。\n"});index.add({'id':29,'href':'/articles/20190817222000/','title':"Netlify + HugoでTOCSS: failedが出た時の対応",'section':"Articles",'content':"久しぶりにブログ更新するぞとGitHubにpushするとnetlifyのビルドエラーが発生。\nその解決方法です。\n対応 #  Netlifyの[Deploy Settings]にある[Build image selection]で、Ubuntu Trusty 14.04をUbuntu Xenial 16.04 (default)に変更する。\nエラー内容 #  pushすると、error: failed to transform resource: TOCSS:...が発生。Sassのコンパイルに失敗しているようです。\n10:07:48 PM: export GIMME_ENV='/opt/buildhome/.gimme_cache/env/go1.10.linux.amd64.env'; 10:07:48 PM: go version go1.10 linux/amd64 10:07:48 PM: Installing missing commands 10:07:48 PM: Verify run directory 10:07:48 PM: Executing user command: hugo --gc --minify 10:07:48 PM: Building sites … 10:07:48 PM: ERROR 2019/08/17 13:07:48 error: failed to transform resource: TOCSS: failed to transform \u0026quot;assets/style.scss\u0026quot; (text/x-scss): this feature is not available in your current Hugo version 10:07:48 PM: Total in 87 ms 10:07:48 PM: Error: Error building site: logged 1 error(s) 10:07:48 PM: Skipping functions preparation step: no functions directory set 10:07:48 PM: Caching artifacts 10:07:48 PM: Started saving pip cache 10:07:48 PM: Finished saving pip cache Sassコンパイル可能なHugoは、Extendedバージョンと呼ばれるものなのですが、Netlifyでは2019/3/15まで暫定対応だったとのこと。 NetlifyでHugoのextendedバージョンが暫定対応されたので試してみた\nBuild imageのUbuntuをTrusty 14からXenial 16に変更して再ビルドするとうまく通りました。\nなぜいままでコンパイル通ってたんだろうか……\n参考 #  https://www.ikemo3.com/inverted/hugo/use-scss/\nhttps://rahilw.dev/blog/hugo-extended-on-netlify/\n"});index.add({'id':30,'href':'/articles/20190419001300/','title':"Python3 + virtualenv",'section':"Articles",'content':"MacにPython3とvirtualenvを設定する手順です。\n環境 #   macOS 10.14.4  インストール #  1. Python3をインストール #  https://www.python.org/ からMac OS X用のインストーラをダウンロードして、インストール実行。\n2. virtualenvをインストール #  # インストール $ pip3 install --user virtualenv # 完了 Installing collected packages: virtualenv The script virtualenv is installed in '/Users/takakd/Library/Python/3.7/bin' which is not on PATH. Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. Successfully installed virtualenv-16.4.3 3. インストール先ディレクトリをPATHに追加 #  # ~/.bash_profile PATH=\u0026quot;/Users/takakd/Library/Python/3.7/bin:${PATH}\u0026quot; 参考: virtualenv\nvirtualenvの使用 #  個別の仮想環境を作る。\n# 環境の情報を保持するディレクトリを作成 mkdir -p ~/virtualenv/env1 # - そのままだとMac標準のpython2.7の環境となってしまうため、-pで3.7を指定 virtualenv -p python3.7 ~/virtualenv/env1 # 仮想環境に入る = 有効化 source ~/virtualenv/env1/bin/activate # 仮想環境から出る = 無効化 deactivate 補足 #  pythonの細かいバージョンの変更をしたい場合は、pyenvで可能なようです。\n"});index.add({'id':31,'href':'/articles/20190302133900/','title':"MTVarでsetvarを使うときの注意点",'section':"Articles",'content':"MovableTypeのテンプレートタグMTVarで、setvarモディファイアを使ったときに詰まったメモです。\n環境 #   MovableType 6.3.3 MTAppjQuery 1.11.3（remove_hostモディファイア利用のため）  setvarの順序 #  EntryのURLから、ドメイン部分を除いて変数に入れようとMTVarを書きました。\nしかし、変数の値にドメイン部分が残ったまま。\n\u0026lt;MTEntryPermalink setvar=\u0026quot;tmp_url\u0026quot; remove_host=\u0026quot;1\u0026quot;/\u0026gt; \u0026lt;MTIgnore\u0026gt;tmp_urlはhttp://〜/hoge/fugaのまま\u0026lt;/MTIgnore\u0026gt; \u0026lt;MTVar name=\u0026quot;tmp_url\u0026quot;/\u0026gt; setvarの順序を入れ替えるとOK。 先にremove_hostを書く必要がありました。\n\u0026lt;MTEntryPermalink remove_host=\u0026quot;1\u0026quot; setvar=\u0026quot;tmp_url\u0026quot;/\u0026gt; \u0026lt;MTIgnore\u0026gt;tmp_urlは/hoge/fuga\u0026lt;/MTIgnore\u0026gt; \u0026lt;MTVar name=\u0026quot;tmp_url\u0026quot;/\u0026gt; 少し冗長でも、SetVarBlockに統一したほうが迷わなくて良いかも知れません。\n\u0026lt;MTSetVarBlock name=\u0026quot;tmp_url\u0026quot;\u0026gt;\u0026lt;MTEntryPermalink remove_host=\u0026quot;1\u0026quot;/\u0026gt;\u0026lt;/MTSetVarBlock\u0026gt; "});index.add({'id':32,'href':'/articles/20181224142205/','title':"ZaimのAPIで履歴を取得",'section':"Articles",'content':"普段、家計簿をZaimで管理しています。 時々、「そういえば今月は、食費をどの程度使っているかな？」と確認するのですが、そのたびにスマホでアプリ起動というのがどうもにも面倒に感じておりました。\nそこで、GoogleHomeで「今月いくら？　→　100円です。」みたいなことをできたら面白いだろうと思い、まずはZaimのAPIを調べました。\n簡単ですが利用までの手順を紹介します。\nZaim API #  Zaimのデータを取得するためのREST APIです。\n Zaimでアカウントを作成した後、 Zaim developersにログインすると、APIのリファレンスを参照できます。\nAPIでデータ取得までのステップ #  設定も含め、次のステップでデータを取得できます。\n  Zaim developersでアプリケーション登録して、コンシューマID・シークレットを取得。 コンシューマID・シークレットでOAuth1.0a認証実行して、ユーザーのトークン・シークレットを取得。 ユーザートークン・シークレットでZaim APIにリクエスト、データを取得。  具体的なコードは GitHubに置きましたので、よろしければご参照ください。\nAPIを使ってみて #  今月いくら使ったかを知りたかったのですが、合計金額を取得できるAPIを見つけられませんでした。取得期間はパラメータで絞り込めるようなので、取得後に計算する必要がありそうです。\n参考 #    GASからZaim APIを利用する - Qiita  RubyでZaim APIを利用する - Qiita  "});index.add({'id':33,'href':'/articles/20181018234800/','title':"Heroku RedisをHerokuAppで複数利用",'section':"Articles",'content':"Laravelで実装したWebアプリにおいて、Heroku Redisを複数利用する時に悩んだ話です。\nHeroku Redisを1Appに複数設置すると、2個目以降の接続情報の環境変数が変化します。\n例えば、1個目はREDIS_URL、2個目はHEROKU_REDIS_IVORY_URL。\n単純にAppを作った時は問題ないのですが、パイプラインを使用していてちょっと困ったことに。\nDevelop、StagingやProductionで環境変数名がずれてしまいました。\nアプリコード内でif-elseしなければいけないかと考えましたが、その必要はなく単純に、管理用の環境変数で解決できました。\nConfig Vars\n   Name Value     REDIS_URL [Heroku Redisが値を設定]   HEROKU_REDIS_IVORY_URL [Heroku Redisが値を設定]   MY_ENV_REDIS_A REDIS_URL   MY_ENV_REDIS_B HEROKU_REDIS_IVORY_URL    \u0026lt;Laravel Root\u0026gt;/config/database.php\n\u0026#39;redis\u0026#39; =\u0026gt; [ // ...  // A用のRedis  \u0026#39;default\u0026#39; =\u0026gt; [ \u0026#39;host\u0026#39; =\u0026gt; parse_url(env(env(\u0026#39;MY_ENV_REDIS_A\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;\u0026#39;), PHP_URL_HOST), \u0026#39;port\u0026#39; =\u0026gt; parse_url(env(env(\u0026#39;MY_ENV_REDIS_A\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;\u0026#39;), PHP_URL_PORT), \u0026#39;password\u0026#39; =\u0026gt; parse_url(env(env(\u0026#39;MY_ENV_REDIS_A\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;\u0026#39;), PHP_URL_PASS), \u0026#39;database\u0026#39; =\u0026gt; 0, ], // B用のRedis  \u0026#39;redisA\u0026#39; =\u0026gt; [ \u0026#39;host\u0026#39; =\u0026gt; parse_url(env(env(\u0026#39;MY_ENV_REDIS_B\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;\u0026#39;), PHP_URL_HOST), \u0026#39;port\u0026#39; =\u0026gt; parse_url(env(env(\u0026#39;MY_ENV_REDIS_B\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;\u0026#39;), PHP_URL_PORT), \u0026#39;password\u0026#39; =\u0026gt; parse_url(env(env(\u0026#39;MY_ENV_REDIS_B\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;\u0026#39;), PHP_URL_PASS), \u0026#39;database\u0026#39; =\u0026gt; 0, ], "});index.add({'id':34,'href':'/articles/20181015013500/','title':"SalesForce CLIでApexを取得",'section':"Articles",'content':" MavensMateがサポート終了になった後も、Apexを取得するために利用していたのですが、ついに起動しなくなりました。\nエラーは\u0026quot;A JavaScript error occurred in the main process\u0026quot;\n試行錯誤すれば解消できるかもしれませんが、無理やり利用を続けるのも不毛そう。\n素直に公式のSalesfoce CLIで取得しました。\n手順 #  1. Salesforce CLIをインストール #  npmでインストールしました。\n$ node --version v9.1.0 $ npm install -g sfdx-cli  Salesforce CLIのインストール\n2. Apex取得 #  SandboxからApexClassをすべて取得。\n# 1. Sandboxにログイン # ... -aでエイリアスを作成（Apex取得時、取得先Salesforce環境を指定するために利用） # ... -rでSandboxのログインURLを指定 # ... -sでデフォルトユーザ名を指定できるが、毎回取得先を指定する予定のため、未指定 $ sfdx force:auth:web:login -a myprj-sand -r https://test.salesforce.com # ... ブラウザが起動して、Salesforceのログイン画面表示 # ... ログインする Successfully authorized \u0026lt;mail address\u0026gt; with org ID \u0026lt;object id\u0026gt; You may now close the browser # ... ブラウザ閉じる # 2. Salesforce DX Project作成 # ... Apex取得コマンド実行に、Projectが必要となるため作成 $ sfdx force:project:create -n myprj # 3. Apex取得 # ... Projectディレクトリに移動 $ cd myprj # ... Apexクラスのソースを全て取得 # ... -uでエイリアス指定 # ... -mで全ApexClass取得を指定 $ sfdx force:source:retirieve -u myprj-sand -m ApexClass  CLIコマンド参考\n補足 #  SFDX #  SalesforceCLIは、Salesforce Developer Experience（SFDX）という開発体制で真価を発揮するようです。\n Salesforce Developer Experience による作業方法の変化\n使いこなすためには スクラッチ組織など、学ぶことは多そう。\nForceCode #  ググるとVisual Studio Codeアドオンの ForceCodeの利用例が多数ありました。\n私の環境ではうまく機能せず断念。\n　開発者が多数いらっしゃる組織では、CLI利用が一般的なのでしょうか。\n楽しそうでもあり、大変そうでもありそう。\n"});index.add({'id':35,'href':'/articles/20180224125248/','title':"HTML FormでS3にPOST",'section':"Articles",'content':" AWSのリファレンスを参考に、FormでS3バケットへのPOSTを試してみました。\n準備 #  FormでS3にPOSTするためには、各フィールドへ送信するファイルに合わせて、POST Policy、Signature、アクセスID、その他ファイルに関する情報を設定する必要があります。\n（POST Policy：POSTする時につける設定情報、Signatureはそれをシークレットキーでhashしたもの）\nバケットポリシー #  フィールドにアクセスIDを設定しますが、このアクセスIDに対応するIAMユーザーは、POST先のバケットに対する操作権限が必要です。\n基本的なAWSのIAMユーザーの考えですね。\n次のようにバケットポリシーを設定します。\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;aws\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;12桁の数字\u0026gt;:user/\u0026lt;IAMユーザー名\u0026gt;\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:*\u0026#34;, \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::\u0026lt;バケット名\u0026gt;/*\u0026#34; ] } ] } ここでは全ての権限与えておりますが、実際に使う場合はActionやConditionブロックで制限したほうがよいかと思います。\nフォーム #  続いてフォーム。\nmultipart/form-dataで、アップロードするファイルの属性や認証情報をPOSTします。\n各パラメータについては リファレンスの[HTML Form Fields]をご参考。\n\u0026lt;form action=\u0026#34;http://\u0026lt;bucket name\u0026gt;.s3.amazonaws.com/\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;label\u0026gt; S3 Tags for File: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;x-amz-meta-tag\u0026#34; value=\u0026#34;\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; Content-Type: \u0026lt;span\u0026gt;image/png\u0026lt;/span\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;!-- AWSが${filename}に選択したファイル名を入れてくれる --\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;key\u0026#34; value=\u0026#34;from-form${filename}\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;acl\u0026#34; value=\u0026#34;private\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;success_action_redirect\u0026#34; value=\u0026#34;[任意のURL]\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;x-amz-server-side-encryption\u0026#34; value=\u0026#34;AES256\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;Policy\u0026#34; value=\u0026#39;[POST PlolicyをBase64エンコードした値]\u0026#39; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;X-Amz-Signature\u0026#34; value=\u0026#34;[Policyをもとに作成したSignature]\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;X-Amz-Credential\u0026#34; value=\u0026#34;/20180219/ap-northeast-1/s3/aws4_request\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;X-Amz-Algorithm\u0026#34; value=\u0026#34;AWS4-HMAC-SHA256\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;X-Amz-Date\u0026#34; value=\u0026#34;20180219T000000Z\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;Content-Type\u0026#34; value=\u0026#34;image/png\u0026#34; /\u0026gt; \u0026lt;label\u0026gt; File: \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;!-- The elements after this will be ignored --\u0026gt; \u0026lt;!-- submitより後にinput要素を置いても送信できないので、submitは一番最後に書く。 --\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;submit\u0026#34; value=\u0026#34;Upload to Amazon S3\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; 試していて、次のようなところで手間取りました。\nただの私の確認不足なのですが……\nSignature生成 #  POST PolicyをBase64エンコードしたものをPolicyというFieldに指定。\nそれをStringToSignとして、認証情報（Signature）を生成しFieldにのせます。\n 生成手順を参考にPHPで実装したのですが、各処理ステップでキー文字列を16進数文字列に変換してしまい、上手く認証が通らず？になってました。\n正しくは、キーをバイナリデータとしてそのまま渡せばOK。１６進数文字列にするのは生成したSignatureをFormのフィールドに指定する時だけ。\nfunction makeSignatureKey($awsSecretKey, $dateStamp, $regionName, $serviceName) { // 間違い  // $kDate = bin2hex(signHash(\u0026#39;AWS4\u0026#39; . $awsSecretKey, $dateStamp));  // $kRegion = bin2hex(signHash($kDate, $regionName));  // $kService = bin2hex(signHash($kRegion, $serviceName));  // $kSign = bin2hex(signHash($kService, \u0026#39;aws4_request\u0026#39;));  $kDate = signHash(\u0026#39;AWS4\u0026#39; . $awsSecretKey, $dateStamp); $kRegion = signHash($kDate, $regionName); $kService = signHash($kRegion, $serviceName); $kSign = signHash($kService, \u0026#39;aws4_request\u0026#39;); return $kSign; } Fieldの位置 #  各フィールド、POST Policyも大丈夫そうなのに、[key]フィールドが不足というエラーが発生。\n原因は、コードをととえている時にsubmitの位置を上にしてしまい、それ以降に書いているパラメータを送れていないからでした。\n\u0026lt;form action=\u0026#34;http://\u0026lt;bucket name\u0026gt;.s3.amazonaws.com/\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;!-- The elements after this will be ignored --\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;submit\u0026#34; value=\u0026#34;Upload to Amazon S3\u0026#34; /\u0026gt; \u0026lt;!-- submit以降のフィールドが無視されるため、パラメータ不足エラーとなる。 --\u0026gt; \u0026lt;label\u0026gt; S3 Tags for File: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;x-amz-meta-tag\u0026#34; value=\u0026#34;\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; Content-Type: \u0026lt;span\u0026gt;image/png\u0026lt;/span\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;key\u0026#34; value=\u0026#34;from-form${filename}\u0026#34; /\u0026gt; ... \u0026lt;/form\u0026gt;  リファレンスを見なおすと、\u0026lt;!-- The elements after this will be ignored --\u0026gt;とちゃんと書いてありますね。恥ずかしい。\nサンプルコードは こちら\n単純なPOSTだとPOST Policyのフォームが楽そうですが、少し込み入った処理（容量が大きいファイル送信など）をする場合は、JavaScriptのSDKを使ったほうがよさそうです。\nまた試してみよう。\n"});index.add({'id':36,'href':'/articles/20180209233744/','title':"AWSでVPC + 踏み台EC2 + NAT Gatewayの設定",'section':"Articles",'content':"VPCの勉強のため、よくある構成で設定を試しました。\n構成 #   VPC #  test-vpc1(172.31.0.0/16)\nPrivate Subnet #  test-subnet-private(172.31.0.0/24)\nPublic subnet #  test-subnet-public(172.31.1.0/24)\n踏み台EC2 #  インスタンスタイプ: t2.micro\nセキュリティグループ\n   タイプ ポート ソース or 送信先     インバウンド 22 ソース: 任意の場所   アウトバウンド すべて 送信先: 任意の場所    EC2 #  インスタンスタイプ: t2.micro\nセキュリティグループ\n   タイプ ポート ソース or 送信先     インバウンド 22 ソース: 踏み台EC2(172.31.1.92/32)   アウトバウンド すべて 送信先: 任意の場所    NAT Gateway #  Public subnetに配置\n設定手順 #  1. VPC作成 #  一から作ってみようと、デフォルトVPCを使用せず新規にVPCを作成。\n 設定内容\n 2. Subnet作成 #   Public subnet\n Private Subnet\n 3. 各ルートテーブル作成 #   Private用ルートテーブル\n Public用ルートテーブル\n 4. Subnetにアタッチ #  作成したルートテーブルをSubnetに関連付けます。\nPublic用ルートテーブルの例\n Public、Privateともに設定した後の状態。\n 5. インターネットゲートウェイ設置 #  インターネットアクセスをするため、インターネットゲートウェイを作成します。\n  インターネットゲートウェイはVPCに関連付けなければいけません。\n 6.　NATゲートウェイ設置 #  続いてNATゲートウェイを作成します。\n  通信は、インターネットゲートウェイを通じてインターネットへ出ていきます。\nそのため、SubnetとしてPublic subnet（インターネットゲートウェイへルーティング設定する）を指定します。\n 7. 各ルートテーブル設定追加 #  0.0.0.0/0あての通信が、インターネットゲートウェイ・NATゲートウェイにルーティングされるように、ルートテーブルにルールを追加します。\nPrivate subnetにNATゲートウェイへのルーティング設定。\n   Public subnetも同様に設定を開き、インターネットゲートウェイを紐付けます。\nこれで、VPC設定はOK。\n8. 踏み台EC2設置 #  続いてEC2の設定。\n外部接続用の踏み台EC2を設置します。AWSのベストプラクティスでBastionと呼ばれるものです。\n お試しなので無料のもの。\n  先ほど作成したVPCとPublic subnetを指定。\n外部から接続できるようにパブリックIP割り当てを有効化。\nまた、あとでログを見たくなるかもしれないので、CloudWatch有効化。\n ストレージはデフォルト。\n 踏み台はどこからでも接続できるように0.0.0.0/0からの接続を許可。\n 注意喚起は了承済み。次へ。\n キーペアはお好みで。\n 完成。\n 9. Private EC2設置 #  Private Subnet内のEC2を作成。踏み台からしか接続できないEC2となります。\n踏み台と同じように作成ウィザードを進めます。\n変更する点は次の通り。\n パブリックIPの割当は不要 セキュリティグループで踏み台EC2のIPのみ接続許可  セキュリティグループで踏み台EC2のプライベートIPを指定。\n これで、各設定完了です。疎通確認します。\n10. NAT経由の疎通確認 #  疎通を確認します。\n 経路 PC -\u0026gt; (SSH) -\u0026gt; 踏み台EC2 -\u0026gt; (SSH) -\u0026gt; Private EC2 -\u0026gt; (NAT Gateway) -\u0026gt; インターネット  # 踏み台EC2にSSH接続 ssh -i public-ec2.pem ec2-user@\u0026lt;踏み台EC2 Public IP\u0026gt; Last login: Sat Jan 27 03:52:17 2018 from \u0026lt;Your IP\u0026gt; __| __|_ ) _| ( / Amazon Linux AMI ___|\\___|___| https://aws.amazon.com/amazon-linux-ami/2017.09-release-notes/ 1 package(s) needed for security, out of 1 available Run \u0026#34;sudo yum update\u0026#34; to apply all updates. # ifconfig.coで自身のIP確認。 [ec2-user@--- ~]$ curl ifconfig.co # \u0026lt;踏み台EC2 Public IP\u0026gt;が表示されればOK。 # 踏み台EC2からPrivate subnet内のEC2に接続。 [ec2-user@--- ~]$ ssh -i public-ec2.pem ec2-user@\u0026lt;Private EC2のPrivate IP\u0026gt; Last login: Sat Jan 27 03:53:05 2018 from \u0026lt;踏み台EC2のPrivate IP\u0026gt; __| __|_ ) _| ( / Amazon Linux AMI ___|\\___|___| https://aws.amazon.com/amazon-linux-ami/2017.09-release-notes/ 1 package(s) needed for security, out of 1 available Run \u0026#34;sudo yum update\u0026#34; to apply all updates. # IP確認 [ec2-user@--- ~]$ curl ifconfig.co # \u0026lt;NAT GatewayのIP\u0026gt;が表示されればOK。 [ec2-user@--- ~]$ exit logout Connection to \u0026lt;Private EC2のPrivate IP\u0026gt; closed.  VPCの資料を読んでいる時、ルーターはどこに配置される？カスタムルートテーブルは何にアタッチする？など、あまりイメージが付きませんでしたが、実際に設定してみると理解が深まりました。\nやっぱり一度手を動かしてみると違いますね。\n"});index.add({'id':37,'href':'/articles/20171217011236/','title':"jQueryでDOM要素の検索速度を比較",'section':"Articles",'content':"jQueryでDOM要素を検索するとき、HTML構造にあわせてセレクタやjQueryメソッドを使用します。\nセレクタの記述パターンはいくつかありますが、それぞれどのくらい速度差があるのか気になり比較しました。\n各パターンと結果は次の通り。\n   no type time[msec]     1 .class \u0026gt; .class 0.00542   2 .class .class 0.00368   3 .class \u0026lt;div\u0026gt; \u0026lt;span\u0026gt; 0.00416   4 .class \u0026gt; \u0026lt;div\u0026gt; \u0026gt; \u0026lt;span\u0026gt; 0.00364   5 .class 0.00182   6 #id 0.00052   7 $parents, $find 0.00948   8 $parents.$find(chain method) 0.00856   9 .class \u0026gt; .class $parents 0.00726   10 .class $parents 0.00176   11 \u0026lt;div\u0026gt; \u0026lt;span\u0026gt; $parents 0.00684   12 \u0026lt;div\u0026gt; \u0026gt; \u0026lt;span\u0026gt; $parents 0.00672     デモページ\n 環境: chrome 63 コード: github  想定通りと言いますか、一意に決まるid指定（6.）が一番ですね。\n1.と2.で、1.が遅いのは意外でした。条件が厳しくなっているから検索コストがかかってるのかな。\n7.と8.を比較すると、メソッドチェーンの効果が現れています。可読性落ちなければ積極的に利用したほうがよさそうです。\n9.〜12.を見ると、10.のクラス指定以外についてはあまり大きな変化がない。\n引数で渡しているjQueryオブジェクトの条件がそもそものコストになるようです。\n全てにidを振ればよいですが、保守を考えると作業負担が大きそう。\n基本は5.や6.を使用して、jQueryオブジェクトで絞り込む時は10.にしようと思います。\n"});index.add({'id':38,'href':'/articles/20171207092227/','title':"IntelliJのTypeScriptで.jsファイルのCan't resolveを解消",'section':"Articles",'content':"WebStormのAngularプロジェクトをIntelliJに移動した時、Javascriptをimportしているところで\u0026quot;Can\u0026rsquo;t resolve\u0026quot;のエラー。\n原因は、IntelliJの単純な設定不足でしたが、どなたかの参考になれば幸いとメモ。\n前提 #   IntelliJ 2016.2 WebStorm 2017.2 ともにAngular, TypeScriptのPluginをインストール済み  IntelliJの設定変更 #  TypeScriptで.jsファイルをimportする場合、TypeScriptのコンパイルオプションに \u0026ldquo;allowJs\u0026rdquo;が必要になります。\ntsconfig.jsonのcompilerOptionsにallowJsを書いているものの、IntelliJに上手く反映されない。\nなんでだろうかと調べてみると、IntelliJプロジェクトの設定不足で、プロジェクトがtsconfig.jsonを参照できていないからでした。\n次のように設定を変更して解消。\n 設定前後の様子 #  設定前はエラーで赤字。\n 設定後は正常に解決。\n 設定まわりは問題がでたら都度調べていますが、解決しないとムズムズと歯がゆい。\n"});index.add({'id':39,'href':'/articles/20171124023540/','title':"Apache2.4で一部のディレクトリのみBasic認証",'section':"Articles",'content':"一部のディレクトリのみBasic認証したいケースがあり、.htaccessで設定しました。\n前提 #   Apache 2.4 .htaccess使用可能  .htaccess #  次の通り。\n\u0026lt;Files ~ \u0026#34;^\\.(htpasswd|htaccess)$\u0026#34;\u0026gt; Require all denied \u0026lt;/Files\u0026gt; \u0026lt;Files ~ \u0026#34;^(?!\\.htpasswd|\\.htaccess).*\u0026#34;\u0026gt; Require all denied # このURLは認証をかけたい SetEnvIf Request_URI \u0026#34;/api/something.*\u0026#34; urlEndpoint \u0026lt;RequireAll\u0026gt; AuthType Basic AuthName \u0026#34;id, pass.\u0026#34; AuthUserFile /some/directory/.htpasswd AuthGroupfile /dev/null Require all granted \u0026lt;RequireAny\u0026gt; # Basic認証必要 \u0026lt;RequireAll\u0026gt; Require valid-user Require env urlEndpoint \u0026lt;/RequireAll\u0026gt; # それ以外は通常アクセス可能 \u0026lt;RequireAll\u0026gt; Require all granted Require not env urlEndpoint \u0026lt;/RequireAll\u0026gt; \u0026lt;/RequireAny\u0026gt; \u0026lt;/RequireAll\u0026gt; \u0026lt;/Files\u0026gt; Apache2.2, 2.4環境を行き来すると、間違ってallow, denyで設定を書いてしまったり。 気をつけないと。\n"});index.add({'id':40,'href':'/articles/20171107023559/','title':"HugoでJSONを出力",'section':"Articles",'content':"サイトの記事データをJSONで出力したい。手作業は大変。CMSを設置するのも億劫。 ということで、Hugoで出力するようにしました。\n サンプルコード\n前提 #   macOS Sierra HomebrewでHugo インストール済み  やりたいこと #  MarkDownで書いた記事データをJSONで出力する。\nHugoにした理由 #  他の静的サイトジェネレータをいくつか試したのですが、次のような印象でした。\n Middleman うまくテンプレートでJSON出力できなかった。 Jekyll ページ一覧をJSON出力する際、list.jsonという出力ファイル名を作れなかった。 Hexo こちらも、ページ一覧をJSON出力する際、list.jsonというファイル名を作れなかった。  メモを破棄したため正直なところ空覚えなのと、あまり深く確認せず試していたので、間違っているかもしれません。 予めご容赦ください。\n手順 #  手順は次のとおりです。\n config.tomlでJSONを出力するように設定。 出力したい内容となるようにJSON出力用テンプレートを調整。 hugoで出力。  1. config.tomlでJSONを出力するように設定 #  記事データをすべてJSON出力したいので、sectionページタイプの出力フォーマットにJSONを追加します。\nconfig.toml\nbaseURL = \u0026#34;http://example.org/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My New Hugo Site\u0026#34; [outputs] section = [\u0026#34;JSON\u0026#34;, \u0026#34;HTML\u0026#34;] 2. 出力したい内容となるようにJSON出力用テンプレートを調整 #  JSON出力用テンプレートを作成します。 postsディレクトリ下に記事データを入れるようにしたので、テンプレートはposts/list.jsonとして作成します。\nposts/list.json\n{% raw %} { \u0026#34;posts\u0026#34;: [ {{ $list := .Data.Pages -}} {{ $len := (len $list) -}} {{ if lt 0 $len -}} {{ range first 1 $list -}} { \u0026#34;id\u0026#34; : {{ .Date.Format \u0026#34;20060102150405\u0026#34; | jsonify }}, \u0026#34;date\u0026#34; : {{ if .Date }}{{ .Date.Format \u0026#34;2006.01.02\u0026#34; | jsonify }}{{else}}\u0026#34;\u0026#34;{{end}}, \u0026#34;title\u0026#34; : {{ .Title | jsonify }}, \u0026#34;summary\u0026#34; : {{ .Summary | jsonify }}, \u0026#34;body\u0026#34; : {{ .Content | jsonify }}, \u0026#34;tags\u0026#34; : {{ if .Params.tags }}{{ .Params.tags | jsonify }}{{ else }}[]{{ end }}, \u0026#34;some-ex-param\u0026#34; : {{ if .Params.someexparam }}{{ .Params.someexparam | jsonify }}{{ else }}false{{ end }} } {{- end -}} {{- end -}} {{- if lt 1 $len -}} {{- range after 1 $list -}} ,{ \u0026#34;id\u0026#34; : {{ .Date.Format \u0026#34;20060102150405\u0026#34; | jsonify }}, \u0026#34;date\u0026#34; : {{ if .Date }}{{ .Date.Format \u0026#34;2006.01.02\u0026#34; | jsonify }}{{else}}\u0026#34;\u0026#34;{{end}}, \u0026#34;title\u0026#34; : {{ .Title | jsonify }}, \u0026#34;summary\u0026#34; : {{ .Summary | jsonify }}, \u0026#34;body\u0026#34; : {{ .Content | jsonify }}, \u0026#34;tags\u0026#34; : {{ if .Params.tags }}{{ .Params.tags | jsonify }}{{ else }}[]{{ end }}, \u0026#34;some-ex-param\u0026#34; : {{ if .Params.sameexparam }}{{ .Params.sameexparam | jsonify }}{{ else }}false{{ end }} } {{- end -}} {{- end }} ] } {% endraw %} 3. hugoで出力 #  # 実行 $ hugo 次のようなファイルができていれば完成です。\nindex.json\n{ \u0026#34;posts\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;20171004010101\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2017.10.04\u0026#34;, \u0026#34;title\u0026#34; : \u0026#34;Post4\u0026#34;, \u0026#34;summary\u0026#34;: \u0026#34;etc4 etc4\\u0026hellip;\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;\\u003cp\\u003eetc4 etc4\\u0026hellip;\\u003c/p\\u003e\\n\u0026#34;, \u0026#34;tags\u0026#34;: [], \u0026#34;some-ex-param\u0026#34;: \u0026#34;test4\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;20171003010101\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2017.10.03\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Post3\u0026#34;, \u0026#34;summary\u0026#34; : \u0026#34;etc3 etc3\\u0026hellip;\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;\\u003cp\\u003eetc3 etc3\\u0026hellip;\\u003c/p\\u003e\\n\u0026#34;, \u0026#34;tags\u0026#34;: [], \u0026#34;some-ex-param\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;20171002010101\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2017.10.02\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Post2\u0026#34;, \u0026#34;summary\u0026#34; : \u0026#34;etc2 etc2\\u0026hellip;\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;\\u003cp\\u003eetc2 etc2\\u0026hellip;\\u003c/p\\u003e\\n\u0026#34;, \u0026#34;tags\u0026#34;: [], \u0026#34;some-ex-param\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;20171001010101\u0026#34;, \u0026#34;date\u0026#34;: \u0026#34;2017.10.01\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Post1\u0026#34;, \u0026#34;summary\u0026#34; : \u0026#34;etc1 etc1\\u0026hellip;\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;\\u003cp\\u003eetc1 etc1\\u0026hellip;\\u003c/p\\u003e\\n\u0026#34;, \u0026#34;tags\u0026#34;: [], \u0026#34;some-ex-param\u0026#34;: false } ] } 補足 #  Hugoは、\u0026ldquo;list\u0026quot;というテンプレート名を持つものを一覧ページのテンプレートと認識します。 一覧ページのテンプレートについて\n最初、この仕様の理解ができておらず、手間取りました。 とほほ……\n静的サイトジェネレータはWebサイトの作成を目的としなくても、こういったシードデータの作成にも使えて便利ですね。\n"});index.add({'id':41,'href':'/articles/20171025023301/','title':"AWS CLIのインストール",'section':"Articles",'content':"AWSマネジメントコンソールを使う機会が増えてきました。\n軽微な確認作業で毎度ログインするのが手間なため、AWS CLIを使って簡単にできないかなとまずはインストール。\n環境 #   macOS Sierra python 2.7.13 pip 9.0.1  手順 #   AWS CLIのインストール 認証情報設定 AWS CLI実行確認  1. AWS CLIのインストール #  ターミナルを起動して、pipでインストール。\n参考: Install\n$ pip install awscli --upgrade --user ... ずらずらとログ出力される。 ... ... # 完了後、awsを実行。 $ aws # usageが出たらOK。 usage: aws [options] \u0026lt;command\u0026gt; \u0026lt;subcommand\u0026gt; [\u0026lt;subcommand\u0026gt; ...] [parameters] To see help text, you can run: aws help aws \u0026lt;command\u0026gt; help aws \u0026lt;command\u0026gt; \u0026lt;subcommand\u0026gt; help aws: error: too few arguments 2. 認証情報の設定 #  認証情報は実行時のコマンドライン引数や環境変数でも指定できますが、毎度指定するのも手間なので設定ファイルの方法を選択しました。 参考: Configuration and Credential Files\n# \u0008ファイルの置き場所を作って $ mkdir ~/.aws # 認証ファイル作成 touch ~/.aws/credentials # 環境設定ファイルも作成 touch ~/.aws/config 各ファイルの内容は次の通り。\n~/.aws/credentials\n[default] aws_access_key_id=\u0026lt;アクセスキーID\u0026gt; aws_secret_access_key=\u0026lt;アクセスキーID作成時に表示できたシークレットキー\u0026gt; アクセスキーIDは下記で表示されているもの。\n~/.aws/config\n[default] region=ap-northeast-1 output=json 初期設定リージョンは東京にしました。 リージョン名(サービス名の箇所)\nこれでインストール完了。\n3. AWS CLI実行確認 #  試しにS3バケット一覧をAWS CLI経由で取得してみます。\n$ aws s3 ls ... S3のバケット一覧が出るはず。 ... ... 機会見ていろいろなコマンドを試していこう。\n"});index.add({'id':42,'href':'/about/','title':"About",'section':"taka👨🏻‍💻",'content':"このサイトについて #  日々の開発作業で気づいたこと、その他小ネタを書いております。\n問い合わせやご連絡ございましたら、フッタのリンクから各種SNSでご連絡ください。\n免責事項 #   注意を払って情報を掲載しておりますが、その正確性・完全性を保証するものではありません。 当サイトの情報をご利用されたことで直接・間接的に生じた損害に関し、一切責任を負うものではありません。 当サイトに掲載されている文章や画像、その他の情報は、当サイトまたは第三者が著作権を有しております。著作権法で認められる場合を除き、著作権者の許可なく、これらを利用できません。なお、利用は、複製、改変、配布、公衆配信等を含みます。 リンク先のサイトは、それぞれ運営者の責任により運営されております。それらサイトについての情報の正確性・完全性について保証するものではありません。 当サイトへのリンクに関連した損害や苦情などに関し、何ら責任を負いませんのでご容赦くださいませ。  "});})();