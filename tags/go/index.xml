<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on taka👨🏻‍💻</title><link>https://takakd.github.io/tags/go/</link><description>Recent content in go on taka👨🏻‍💻</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>&amp;copy; taka 2018</copyright><lastBuildDate>Fri, 27 Nov 2020 17:31:30 +0900</lastBuildDate><atom:link href="https://takakd.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS SDK for Goを使ったユニットテスト</title><link>https://takakd.github.io/articles/20201129173130/</link><pubDate>Fri, 27 Nov 2020 17:31:30 +0900</pubDate><guid>https://takakd.github.io/articles/20201129173130/</guid><description>AWS SDK for Goの各AWSサービスのユニットテストのコードです。 単純にラップするするstructを作ってテストしています。 例えば、DynamoDBの場合は次の通り。 実装 package repository import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/service/dynamodb&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute&amp;#34; // ... ) // SDK wrapper interface, which can be able to unit test. type DynamoDbWrapper interface { // Define the same as SDK. Query(input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) // Define, if it needs more. // ... } // Default implementation. // Use this if the argument of &amp;#34;NewDynamoDbRepository&amp;#34; is not passed. type DynamoDbWrapperAdapter struct { svc *dynamodb.DynamoDB } // Dispatch simply. func (d *DynamoDbWrapperAdapter) Query(input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) { return d.svc.Query(input) } // Set wrp to null. In case unit test, set mock interface. func NewDynamoDbRepository(wrp DynamoDbWrapper) updatetimerevent.Repository { if wrp == nil { wrp = &amp;amp;DynamoDbWrapperAdapter{ svc: dynamodb.New(session.New()), } } return &amp;amp;DynamoDbRepository{ wrp: wrp, } } // Find something. func (r *DynamoDbRepository) FindSome(ctx context.Context, userId string) (some *SomeStruct, err error) { input := &amp;amp;dynamodb.QueryInput{ ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{ &amp;#34;:userid&amp;#34;: { S: aws.String(userId), }, }, KeyConditionExpression: aws.String(&amp;#34;UserId = :userid&amp;#34;), TableName: aws.String(&amp;#34;DYNAMODB_TABLE&amp;#34;), } // Call mock method, if r.wrp is set mock. result, err := r.wrp.Query(input) if err != nil { return } // ... } テストコード t.Run(&amp;#34;ok:Query&amp;#34;, func(t *testing.T) { caseUserId := &amp;#34;test user&amp;#34; caseInput := &amp;amp;dynamodb.QueryInput{ ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{ &amp;#34;:userid&amp;#34;: { S: aws.String(caseUserId), }, }, KeyConditionExpression: aws.String(&amp;#34;UserId = :userid&amp;#34;), TableName: aws.String(&amp;#34;DYNAMODB_TABLE&amp;#34;), } caseItem := &amp;amp;dynamodb.QueryOutput{ Items: []map[string]*dynamodb.AttributeValue{}, } ctrl := gomock.NewController(t) defer ctrl.Finish() s := NewMockDynamoDbWrapper(ctrl) s.EXPECT().Query(gomock.Eq(caseInput)).Return(caseItem, nil) repo := NewDynamoDbRepository(s) got, err := repo.FindSome(context.TODO(), caseUserId) assert.NoError(t, err) // assert... }) Ref. AWS SDK for Go aws/aws-sdk-go</description></item></channel></rss>