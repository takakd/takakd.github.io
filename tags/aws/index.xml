<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on taka👨🏻‍💻</title>
    <link>https://takakd.github.io/tags/aws/</link>
    <description>Recent content in aws on taka👨🏻‍💻</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; taka 2018</copyright>
    <lastBuildDate>Mon, 16 Nov 2020 00:42:43 +0900</lastBuildDate><atom:link href="https://takakd.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The REST API doesn&#39;t contain any methods (Service: AmazonApiGateway...</title>
      <link>https://takakd.github.io/articles/20201116004243/</link>
      <pubDate>Mon, 16 Nov 2020 00:42:43 +0900</pubDate>
      
      <guid>https://takakd.github.io/articles/20201116004243/</guid>
      <description>AWS CloudFormationでProxy統合したAPIをデプロイしようとして次のようなエラーがでました。 CREATE_FAILED AWS::ApiGateway::Deployment SomeDeployment The REST API doesn&amp;#39;t contain any methods (Service:BadRequestException; Request ID:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx; Proxy: null) 原因は、Deploymentリソース作成時にAWS::ApiGateway::Methodリソースがまだ作られていないためdoesn&#39;t contain DependsOnをAWS::ApiGateway::Deploymentに追記することで解決できました。 記述のクセをつけておいたほうがよさそうですね。 Ref. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html https://nickolaskraus.org/articles/creating-an-amazon-api-gateway-with-a-lambda-integration-using-cloudformation/</description>
    </item>
    
    <item>
      <title>API Gateway統合レスポンスのヘッダーのマッピングで固定値を設定</title>
      <link>https://takakd.github.io/articles/20201102010035/</link>
      <pubDate>Mon, 02 Nov 2020 01:00:36 +0900</pubDate>
      
      <guid>https://takakd.github.io/articles/20201102010035/</guid>
      <description>CloudFormation(.yaml)で、API Gatewayの統合レスポンスのヘッダーのマッピングで固定値を指定したい場合は、次のように書くとよい。 SomeMethod: Type: AWS::ApiGateway::Method Properties: HttpMethod: POST ... Integration: Type: AWS IntegrationHttpMethod: POST ... IntegrationResponses: - StatusCode: 200 SelectionPattern: &amp;#34;status:200&amp;#34; ResponseParameters: # OK method.response.header.X-STATIC-HEADER: &amp;#34;&amp;#39;1&amp;#39;&amp;#34; # NG method.response.header.X-STATIC-HEADER: 1 # NG method.response.header.X-STATIC-HEADER: &amp;#34;1&amp;#34; Reference https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apitgateway-method-integration-integrationresponse.html#cfn-apigateway-method-integration-integrationresponse-responseparameters</description>
    </item>
    
    <item>
      <title>AWS5資格の勉強ログ</title>
      <link>https://takakd.github.io/articles/20200806023547/</link>
      <pubDate>Thu, 06 Aug 2020 02:35:47 +0900</pubDate>
      
      <guid>https://takakd.github.io/articles/20200806023547/</guid>
      <description>勉強を始めた時に勉強法を色々調べたのですが、勉強ログ的なものは少ないように思ったので残しておきます。どなたかの参考になれば幸いです。 背景 勉強を始めた時のスペックは次の通り。 AWS使用歴4年ぐらい。 使ったサービスは、EC2, Route53, EBS, IAM, VPC, CloudFront, S3程度。 履歴 2017/12 Passed - Cloud プラクティショナー 2018/1 Failed - ソリューションアーキテクト アソシエイト 2019/9 Passed - ソリューションアーキテクト アソシエイト 2019/10 Passed - デベロッパー アソシエイト 2019/11 Passed - SysOpsアドミニストレーター アソシエイト 2020/5 Passed - DevOpsエンジニア プロフェッショナル 2020/5 Failed - ソリューションアーキテクト プロフェッショナル 2020/6 Passed - ソリューションアーキテクト プロフェッショナル ログ 1. Cloud プラクティショナー Passed: スコア 710 この時点ではEC2, EBS, S3, Cloudfront, Route53を少し使った程度で、全サービスの基本となるVPCやIAMはだいたい50%程度の理解でした。 まずはこのビデオを見ました。70%程度は知ってい</description>
    </item>
    
    <item>
      <title>API Gateway &#43; Lambda - golang</title>
      <link>https://takakd.github.io/articles/20200705022238/</link>
      <pubDate>Sun, 05 Jul 2020 02:22:39 +0900</pubDate>
      
      <guid>https://takakd.github.io/articles/20200705022238/</guid>
      <description>APIGateway + GoでLambdaのサンプルです。 仕様 エンドポイント: https://&amp;lt;API ID&amp;gt;.execute-api.ap-northeast-1.amazonaws.com/&amp;lt;stage&amp;gt;/&amp;lt;Resource&amp;gt; HTTPメソッド: GET パラメータ: { &amp;#34;text&amp;#34;: &amp;#34;string&amp;#34; } Lambdaハンドラ 引数をstructで定義。 package main import ( &amp;#34;context&amp;#34; &amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34; &amp;#34;github.com/pkg/errors&amp;#34; ) // Ref: https://docs.aws.amazon.com/lambda/latest/dg/golang-handler.html // Receive arguments as struct. type Event struct { Text string `json:&amp;#34;text&amp;#34;` } func (e *Event) validate() bool { valid := true if e.Text == &amp;#34;&amp;#34; { valid = false } return valid } // Response type Response struct { Message string `json:&amp;#34;message&amp;#34;` } // Lambda handler func HandleRequest(ctx context.Context, event Event) (Response, error) { resp := Response{} if !event.validate() { return resp, errors.Errorf(&amp;#34;need text.&amp;#34;) } // Something to do you want here. resp.Message = &amp;#34;ok&amp;#34; return resp, nil } // Main func main() { lambda.Start(HandleRequest) } 統合リクエスト - マッピングテンプレート structに設定する値を追加。 ここではtextを設定しています。 #set($allParams = $input.params()) { &amp;#34;text&amp;#34;: &amp;#34;$input.params(&amp;#39;text&amp;#39;)&amp;#34;, &amp;#34;body-json&amp;#34; : $input.json(&amp;#39;$&amp;#39;), ... } レスポンス 返ってくるレスポンス。 { &amp;#34;message&amp;#34;: &amp;#34;ok&amp;#34; }</description>
    </item>
    
    <item>
      <title>HTML FormでS3にPOST</title>
      <link>https://takakd.github.io/articles/20180224125248/</link>
      <pubDate>Sat, 24 Feb 2018 12:52:48 +0900</pubDate>
      
      <guid>https://takakd.github.io/articles/20180224125248/</guid>
      <description>AWSのリファレンスを参考に、FormでS3バケットへのPOSTを試してみました。 準備 FormでS3にPOSTするためには、各フィールドに送信するファイルに合わせ、POST Policy、Signature、アクセスID、その他ファイルに関する情報を設定する必要があります。 （POST Policy：POSTする時につける設定情報、Signatureはそれをシークレットキーでhashしたもの） バケットポリシー フィールドにアクセスIDを設定しますが、このアクセスIDに対応するIAMユーザーは、POST先のバケットに対する操作権限が必要です。 基本的なAWSのIAMユーザーの考えですね。 次のようにバケットポリシーを設定します。 { &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Principal&amp;#34;: { &amp;#34;aws&amp;#34;: &amp;#34;arn:aws:iam::&amp;lt;12桁の数字&amp;gt;:user/&amp;lt;IAMユーザー名&amp;gt;&amp;#34; }, &amp;#34;Action&amp;#34;: &amp;#34;s3:*&amp;#34;, &amp;#34;Resource&amp;#34;: [ &amp;#34;arn:aws:s</description>
    </item>
    
    <item>
      <title>AWSでVPC &#43; 踏み台EC2 &#43; NAT Gatewayの設定</title>
      <link>https://takakd.github.io/articles/20180209233744/</link>
      <pubDate>Fri, 09 Feb 2018 23:37:44 +0900</pubDate>
      
      <guid>https://takakd.github.io/articles/20180209233744/</guid>
      <description>VPCの勉強のため、よくある構成で設定を試しました。 構成 VPC test-vpc1(172.31.0.0/16) Private Subnet test-subnet-private(172.31.0.0/24) Public subnet test-subnet-public(172.31.1.0/24) 踏み台EC2 インスタンスタイプ: t2.micro セキュリティグループ タイプ ポート ソース or 送信先 インバウンド 22 ソース: 任意の場所 アウトバウンド すべて 送信先: 任意の場所 EC2 インスタンスタイプ: t2.micro セキュリティグループ タイプ ポート ソース or 送信先 インバウンド 22 ソース: 踏み台EC2(172.31.1.92/32) アウトバウンド すべて 送信先: 任意の場所 NAT Gateway Public subnetに配置 設定手順 1. VPC作成 一から作ってみようと、デフォルトVPCを使用せず新規にVPCを作成。 設定内容 2. Subnet作成 Public subnet Private Subnet 3. 各ルートテーブル作成 Private用ルートテーブル Public用ルートテーブル 4. Subnetにアタッチ 作成したルートテーブルをSubnetに関連付けます。 Public用ルートテーブルの例 Public、Privateともに設定した後の状態。 5. インターネットゲ</description>
    </item>
    
    <item>
      <title>AWS CLIのインストール</title>
      <link>https://takakd.github.io/articles/20171025023301/</link>
      <pubDate>Wed, 25 Oct 2017 02:33:01 +0900</pubDate>
      
      <guid>https://takakd.github.io/articles/20171025023301/</guid>
      <description>AWSマネジメントコンソールを使う機会が増えてきました。 軽微な確認作業で毎度ログインするのが手間なため、AWS CLIを使って簡単にできないかなとまずはインストール。 環境 macOS Sierra python 2.7.13 pip 9.0.1 手順 AWS CLIのインストール 認証情報設定 AWS CLI実行確認 1. AWS CLIのインストール ターミナルを起動して、pipでインストール。 参考: Install $ pip install awscli --upgrade --user ... ずらずらとログ出力される。 ... ... # 完了後、awsを実行。 $ aws # usageが出たらOK。 usage: aws [options] &amp;lt;command&amp;gt; &amp;lt;subcommand&amp;gt; [&amp;lt;subcommand&amp;gt; ...] [parameters] To see help text, you can run: aws help aws &amp;lt;command&amp;gt; help aws &amp;lt;command&amp;gt; &amp;lt;subcommand&amp;gt; help aws: error: too few arguments 2. 認証情報の設定 認証情報は実行時のコマンドライン引数や環境変数でも指定できますが、毎度指定するのも手間なので設定ファイルの方法を選択しました。 参考: Configuration and Credential Files# ファイルの置き場所を作って $ mkdir ~/.aws # 認証ファイル作成 touch ~/.aws/credentials # 環境設定ファイルも作成 touch ~/.aws/config 各ファイルの内容は次の通り。 ~/.aws/credentials [default] aws_access_key_id=&amp;lt;アクセスキーID</description>
    </item>
    
  </channel>
</rss>
